import customtkinter as ctk
import urllib.request
import shutil
import json, os, sys
import zipfile
import tkinter as tk
import threading
import platform
import subprocess

from PIL import Image, ImageTk
from concurrent.futures import ThreadPoolExecutor, as_completed
from tkinter import messagebox, filedialog
from copy import deepcopy
from tkinter import colorchooser, messagebox

sys.dont_write_bytecode = True

theme = deepcopy(ctk.ThemeManager.theme)

theme["CTkButton"] = {
    "fg_color": "#128f1c", "corner_radius": 15,
    "text_color": "#FFFFFF", "border_width": 5,
    "hover_color": "#005A00", "border_color": "#005A00",
    "text_color_disabled": "#00F7FF"
}
theme["CTkEntry"] = {
    "fg_color": "#128f1c", "corner_radius": 15,
    "text_color": "#FFFFFF", "border_width": 5,
    "border_color": "#065500", "placeholder_text_color": "#222222"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã CTk
ctk.set_appearance_mode("Dark")  # –†–µ–∂–∏–º: "System", "Dark", "Light"
ctk.ThemeManager.theme = theme

requirements_list = []

CACHE_FILE = "cache.json"
def resource_path(relative_path):
    """–ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–∑ .exe –∏ –∏–∑ .py"""
    if hasattr(sys, '_MEIPASS'):
        return os.path.join(os.path.dirname(sys.executable), relative_path)
    return os.path.join(os.path.abspath("."), relative_path)

def load_or_create_cache(mod_name):
    default_cache = {
        "_comment": "–ù–µ —É–¥–∞–ª—è–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–∏–ª –æ–Ω –Ω—É–∂–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
        "wall": [
            "copper-wall",
            "copper-wall-large",
            "titanium-wall",
            "titanium-wall-large",
            "plastanium-wall",
            "plastanium-wall-large",
            "thorium-wall",
            "thorium-wall-large",
            "surge-wall",
            "surge-wall-large",
            "phase-wall",
            "phase-wall-large"
        ],
        "ThermalGenerator": [
            "thermal-generator"
        ],
        "SolarGenerator": [
            "solar-panel",
            "solar-panel-large"
        ],
        "ConsumeGenerator": [
            "combustion-generator",
            "steam-generator",
            "rtg-generator",
            "differential-generator"
        ],
        "StorageBlock": [
            "container",
            "vault"
        ],
        "GenericCrafter": [
            "graphite-press",
            "pyratite-mixer",
            "blast-mixer",
            "silicon-smelter",
            "spore-press",
            "coal-centrifuge",
            "multi-press",
            "silicon-crucible",
            "plastanium-compressor",
            "phase-weaver",
            "kiln",
            "pulverizer",
            "melter",
            "surge-smelter",
            "separator",
            "cryofluid-mixer",
            "disassembler"
        ],
        "beam-node":[
            "beam-node"
        ],
        "conveyor": [
            "conveyor",
            "titanium-conveyor"
        ],
        "conduit": [
            "conduit",
            "pulse-conduit"
        ],
        "Pump": ["impulse-pump", "rotary-pump", "mechanical-pump"],
        "SolidPump": ["water-extractor"],
        "PowerNode": ["power-node", "power-node-large"],
        "router": ["Router", "Distributor"],
        "Junction": ["Junction"],
        "Unloader": ["Unloader"],
        "liquid_router": ["liquid-router"],
        "Liquid_Junction": ["Liquid-Junction"],
        "Liquid_Tank": ["liquid-container", "liquid-tank"],
        "Battery": ["Battery-large", "Battery"]
    }

    path = os.path.join("mindustry_mod_creator", "cache", f"{mod_name}.json")
    cache_file_path = os.path.join("mindustry_mod_creator", "cache")
    os.makedirs(cache_file_path, exist_ok=True)
    
    if not os.path.exists(path):
        with open(path, "w", encoding="utf-8") as f:
            json.dump(default_cache, f, indent=4, ensure_ascii=False)
        return default_cache
    
    try:
        with open(path, "r", encoding="utf-8") as f:
            cache_data = json.load(f)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã - –î–û–ë–ê–í–¨–¢–ï –≠–¢–û–¢ –ë–õ–û–ö
        updated = False
        for key, default_value in default_cache.items():
            if key not in cache_data:
                cache_data[key] = default_value
                updated = True
            elif not isinstance(cache_data[key], list):
                cache_data[key] = default_value
                updated = True
        
        if updated:
            with open(path, "w", encoding="utf-8") as f:
                json.dump(cache_data, f, indent=4, ensure_ascii=False)
        
        return cache_data
        
    except json.JSONDecodeError:
        with open(path, "w", encoding="utf-8") as f:
            json.dump(default_cache, f, indent=4, ensure_ascii=False)
        return default_cache
    
class MindustryModCreator:
    mod_folder = None
    mod_name = None
    def main():
        def setup_mod_json():
            global mod_name
            mod_name = entry_name.get().strip()
            if not mod_name:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏!")
                return

            current_dir = os.path.join("mindustry_mod_creator", "mods")
            global mod_folder
            mod_folder = os.path.join(current_dir, mod_name)
            os.makedirs(mod_folder, exist_ok=True)

            cache_data = load_or_create_cache(mod_name)
            mod_json_path = os.path.join(mod_folder, "mod.json")

            if os.path.exists(mod_json_path):
                result = messagebox.askyesno("–§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", "mod.json —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å?")
                if result:
                    open_mod_editor(mod_folder, load_existing=True)
                else:
                    —Å–æ–∑–¥–∞–Ω–∏–µ_–∫–Ω–æ–ø–∫–∏()
            else:
                open_mod_editor(mod_folder, load_existing=False)

        def setup_mod_json_auto():
            global mod_name
            mod_name = entry_name.get().strip()
            if not mod_name:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏!")
                return

            current_dir = os.path.join("mindustry_mod_creator", "mods")
            global mod_folder
            mod_folder = os.path.join(current_dir, mod_name)
            os.makedirs(mod_folder, exist_ok=True)

            cache_data = load_or_create_cache(mod_name)
            mod_json_path = os.path.join(mod_folder, "mod.json")

            if os.path.exists(mod_json_path):
                    —Å–æ–∑–¥–∞–Ω–∏–µ_–∫–Ω–æ–ø–∫–∏()
            else:
                open_mod_editor(mod_folder, load_existing=False)

        def clear_window():
            for widget in root.winfo_children():
                widget.destroy()

        def open_mod_editor(mod_folder, load_existing=False):
            """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è mod.json"""
            clear_window()

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞
            title_label = ctk.CTkLabel(root, text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ mod.json", font=("Arial", 16, "bold"))
            title_label.pack(pady=10)

            # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º —Ñ–æ—Ä–º—ã
            form_frame = ctk.CTkFrame(root)
            form_frame.pack(pady=10)

            # –ü–æ–¥–ø–∏—Å–∏ –∏ –ø–æ–ª—è –≤–≤–æ–¥–∞
            field_names = ["–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–∞", "–ê–≤—Ç–æ—Ä", "–í–µ—Ä—Å–∏—è –º–æ–¥–∞", "–û–ø–∏—Å–∞–Ω–∏–µ"]
            entries = []

            for i, field in enumerate(field_names):
                label = ctk.CTkLabel(form_frame, text=field, anchor="w")
                entry = ctk.CTkEntry(form_frame, width=350)
                label.grid(row=i, column=0, sticky="w", padx=10, pady=5)
                entry.grid(row=i, column=1, padx=10, pady=5)
                entries.append(entry)

            # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏–≥—Ä—ã (Combobox)
            label_version = ctk.CTkLabel(form_frame, text="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏–≥—Ä—ã")
            combo_version = ctk.CTkComboBox(form_frame, values=["149", "150", "151"], state="readonly", width=150)
            combo_version.set("151")

            label_version.grid(row=4, column=0, sticky="w", padx=10, pady=5)
            combo_version.grid(row=4, column=1, padx=10, pady=5, sticky="w")

            # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ mod.json, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if load_existing:
                mod_json_path = os.path.join(mod_folder, "mod.json")
                with open(mod_json_path, "r", encoding="utf-8") as file:
                    mod_data = json.load(file)
                entries[0].insert(0, mod_data.get("name", ""))
                entries[1].insert(0, mod_data.get("author", ""))
                entries[2].insert(0, mod_data.get("version", ""))
                entries[3].insert(0, mod_data.get("description", ""))
                combo_version.set(str(mod_data.get("minGameVersion", "149")))

            # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            button_create = ctk.CTkButton(root, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å mod.json", font=("Arial", 12),
                                    command=lambda: create_mod_json(mod_folder, *entries, combo_version))
            button_create.pack(pady=20)

        def create_mod_json(mod_folder, entry_name_1, entry_name_2, entry_name_3, entry_name_4, combo_version):
            """–°–æ–∑–¥–∞—ë—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç mod.json"""
            name = entry_name_1.get().strip()
            author = entry_name_2.get().strip()
            version_mod = entry_name_3.get().strip()
            description = entry_name_4.get().strip()
            version_str = combo_version.get()
            try:
                version = float(version_str)
                # –ï—Å–ª–∏ —á–∏—Å–ª–æ —Ü–µ–ª–æ–µ ‚Äî –¥–µ–ª–∞–µ–º int, –∏–Ω–∞—á–µ –æ—Å—Ç–∞–≤–ª—è–µ–º float
                version = int(version) if version.is_integer() else version
            except ValueError:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é –∏–≥—Ä—ã!")
                return


            if not name or not author or not description:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!")
                return

            mod_json_path = os.path.join(mod_folder, "mod.json")

            mod_data = {
                "name": name,
                "author": author,
                "version": version_mod,
                "description": description,
                "minGameVersion": version
            }

            with open(mod_json_path, "w", encoding="utf-8") as file:
                json.dump(mod_data, file, indent=4, ensure_ascii=False)

            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–§–∞–π–ª {mod_json_path} —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")

            —Å–æ–∑–¥–∞–Ω–∏–µ_–∫–Ω–æ–ø–∫–∏()

        def —Å–æ–∑–¥–∞–Ω–∏–µ_–∫–Ω–æ–ø–∫–∏():
            """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""

            def delete_item(item, content_type):
                """–£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –æ—á–∏—Å—Ç–∫–æ–π –≤—Å–µ—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø (–¥–ª—è blocks - item["type"], –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - content_type)
                sprite_type = item["type"] if content_type == "blocks" else content_type
                item_name = item["name"]
                
                # –û—Å–Ω–æ–≤–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                texture_folder = os.path.join(mod_folder, "sprites", sprite_type, item_name)  # sprites/type/name/
                single_texture = os.path.join(mod_folder, "sprites", sprite_type, f"{item_name}.png")  # sprites/type/name.png
                cache_path = os.path.join("mindustry_mod_creator", "cache", f"{mod_name}.json")  # cache/modname.json

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ
                confirm_msg = f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å {content_type[:-1]} '{item_name}'?\n\n"
                confirm_msg += f"‚Ä¢ –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö: {item['full_path']}\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—Å—Ç—É—Ä–∞—Ö
                if os.path.exists(texture_folder):
                    confirm_msg += f"‚Ä¢ –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –í–°–Ø –ø–∞–ø–∫–∞ —Å —Ç–µ–∫—Å—Ç—É—Ä–∞–º–∏: {texture_folder}\n"
                elif os.path.exists(single_texture):
                    confirm_msg += f"‚Ä¢ –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω —Ñ–∞–π–ª —Ç–µ–∫—Å—Ç—É—Ä—ã: {single_texture}\n"
                else:
                    confirm_msg += "‚Ä¢ –¢–µ–∫—Å—Ç—É—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"

                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                if not messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è", confirm_msg):
                    return

                try:
                    # 1. –£–¥–∞–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö
                    if os.path.exists(item["full_path"]):
                        os.remove(item["full_path"])

                    # 2. –£–¥–∞–ª—è–µ–º —Ç–µ–∫—Å—Ç—É—Ä—ã (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - —É–¥–∞–ª–µ–Ω–∏–µ –ø–∞–ø–∫–∏)
                    if os.path.exists(texture_folder):
                        shutil.rmtree(texture_folder)
                    elif os.path.exists(single_texture):
                        os.remove(single_texture)

                    # 3. –ß–∏—Å—Ç–∏–º –∫—ç—à
                    item_removed = False  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
                    if os.path.exists(cache_path):
                        with open(cache_path, "r", encoding="utf-8") as f:
                            cache = json.load(f)
                        
                        # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤–æ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –∫—ç—à–∞
                        for category in list(cache.keys()):  # –ò—Å–ø–æ–ª—å–∑—É–µ–º list() –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                            if category == "_comment":
                                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                            
                            if isinstance(cache[category], list) and item_name in cache[category]:
                                cache[category].remove(item_name)
                                item_removed = True
                                
                                # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å—Ç–∞–ª–∞ –ø—É—Å—Ç–æ–π - —É–¥–∞–ª—è–µ–º –µ—ë
                                if not cache[category]:
                                    del cache[category]
                                
                                break  # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫—ç—à–µ, –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –±—ã–ª –Ω–∞–π–¥–µ–Ω –∏ —É–¥–∞–ª—ë–Ω
                        if item_removed:
                            with open(cache_path, "w", encoding="utf-8") as f:
                                json.dump(cache, f, indent=4, ensure_ascii=False)

                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
                    result_msg = f"{content_type[:-1]} '{item_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω\n"
                    result_msg += "‚Ä¢ –í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—É—Ä—ã —É–¥–∞–ª–µ–Ω—ã\n" if os.path.exists(texture_folder) or os.path.exists(single_texture) else ""
                    
                    messagebox.showinfo("–£—Å–ø–µ—Ö", result_msg)
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                    —Å–æ–∑–¥–∞–Ω–∏–µ_–∫–Ω–æ–ø–∫–∏()
                    
                except Exception as e:
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å: {str(e)}")

            def edit_item_json(json_path):
                """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ JSON —Ñ–∞–π–ª–∞"""
                if not os.path.exists(json_path):
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {json_path}")
                    return
                
                with open(json_path, "r", encoding="utf-8") as f:
                    try:
                        data = json.load(f)
                    except json.JSONDecodeError:
                        messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON —Ñ–∞–π–ª")
                        return
                
                # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
                editor = ctk.CTkToplevel(root)
                editor.title(f"–†–µ–¥–∞–∫—Ç–æ—Ä {os.path.basename(json_path)}")
                editor.geometry("800x600")

                editor.after(500, lambda: editor.focus_force())
                
                text_frame = ctk.CTkFrame(editor)
                text_frame.pack(fill="both", expand=True, padx=10, pady=10)
                
                text = ctk.CTkTextbox(text_frame, font=("Consolas", 12))
                text.pack(fill="both", expand=True)
                text.insert("1.0", json.dumps(data, indent=4, ensure_ascii=False))
                
                button_frame = ctk.CTkFrame(editor)
                button_frame.pack(pady=10)
                
                def save_changes():
                    try:
                        new_data = json.loads(text.get("1.0", tk.END))
                        with open(json_path, "w", encoding="utf-8") as f:
                            json.dump(new_data, f, indent=4, ensure_ascii=False)
                        messagebox.showinfo("–£—Å–ø–µ—Ö", "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
                    except Exception as e:
                        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: {str(e)}")
                
                ctk.CTkButton(button_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_changes).pack(side="left", padx=5)
                ctk.CTkButton(button_frame, text="–û—Ç–º–µ–Ω–∞", command=editor.destroy).pack(side="left", padx=5)

            def open_mod_folder():
                mods_folder = os.path.join("mindustry_mod_creator", "mods", f"{mod_name}")
                try:
                    if not os.path.exists(mods_folder):
                        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü–∞–ø–∫–∞ —Å –º–æ–¥–∞–º–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:\n{mods_folder}")
                        return
                    
                    if platform.system() == "Windows":
                        os.startfile(mods_folder)
                    elif platform.system() == "Darwin":
                        subprocess.run(["open", mods_folder])
                    else:  # Linux
                        subprocess.run(["xdg-open", mods_folder])
                        
                except Exception as e:
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É:\n{str(e)}")

            def create_zip():
                try:
                    folder_path = os.path.join("mindustry_mod_creator", "mods", mod_name)
                    zip_path = os.path.join(f"C:\\Program Files (x86)\\Steam\\steamapps\\common\\Mindustry\\saves\\mods\\{mod_name}.zip")
                    #appdata = os.getenv('AppData')
                    #zip_path = os.path.join(f"{appdata}", "Mindustry/mods/", f"{mod_name}.zip")

                    if not os.path.exists(folder_path):
                        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü–∞–ø–∫–∞ –º–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:\n{folder_path}")
                        return None
                    
                    if not os.listdir(folder_path):
                        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü–∞–ø–∫–∞ –º–æ–¥–∞ –ø—É—Å—Ç–∞:\n{folder_path}")
                        return None

                    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π ZIP-–∞—Ä—Ö–∏–≤, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    if os.path.exists(zip_path):
                        try:
                            os.remove(zip_path)
                        except Exception as e:
                            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π –∞—Ä—Ö–∏–≤:\n{str(e)}")
                            return None

                    with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
                        for root, _, files in os.walk(folder_path):
                            for file in files:
                                file_path = os.path.join(root, file)
                                arcname = os.path.relpath(file_path, os.path.dirname(folder_path))
                                zipf.write(file_path, arcname)
                    
                    messagebox.showinfo("–£—Å–ø–µ—Ö", f"ZIP-–∞—Ä—Ö–∏–≤ –º–æ–¥–∞ —Å–æ–∑–¥–∞–Ω:\n{zip_path}")
                    return zip_path
                    
                except Exception as e:
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞—Ä—Ö–∏–≤:\n{str(e)}")
                    return None

            def edit_requirements_from_context():
                """–†–µ–¥–∞–∫—Ç–æ—Ä —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¥–ª—è –±–ª–æ–∫–∞, –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
                if not hasattr(root, 'current_block_item'):
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ë–ª–æ–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω")
                    return
                
                item = root.current_block_item
                block_name = item["name"]
                folder_path = os.path.dirname(item["full_path"])
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∞
                block_path = os.path.join(folder_path, f"{block_name}.json")
                if not os.path.exists(block_path):
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–§–∞–π–ª –±–ª–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {block_path}")
                    return
                
                with open(block_path, "r", encoding="utf-8") as f:
                    try:
                        block_data = json.load(f)
                    except json.JSONDecodeError:
                        messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON —Ñ–∞–π–ª –±–ª–æ–∫–∞.")
                        return
                
                clear_window()
                root.configure(fg_color="#2b2b2b")
                
                main_frame = ctk.CTkFrame(root, fg_color="transparent")
                main_frame.pack(padx=10, pady=10, fill="both", expand=True)
                
                header_frame = ctk.CTkFrame(main_frame, height=90, fg_color="#3a3a3a", corner_radius=8)
                header_frame.pack(fill="x", pady=(0, 15))
                
                try:
                    block_type = block_data.get("type")
                    texture_path = os.path.join(mod_folder, "sprites", block_type, block_name, f"{block_name}.png")
                    if os.path.exists(texture_path):
                        img = Image.open(texture_path)
                        img = img.resize((70, 70), Image.LANCZOS)
                        ctk_img = ctk.CTkImage(light_image=img, size=(70, 70))
                        img_label = ctk.CTkLabel(header_frame, image=ctk_img, text="")
                        img_label.pack(side="left", padx=20)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                
                ctk.CTkLabel(header_frame, 
                            text=f"–†–µ–¥–∞–∫—Ç–æ—Ä —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π: {block_name}, –ª–∏–º–∏—Ç 25000",
                            font=("Arial", 18, "bold")).pack(side="left", padx=10)
                
                content_frame = ctk.CTkFrame(main_frame, fg_color="#3a3a3a", corner_radius=8)
                content_frame.pack(fill="both", expand=True)
                
                def load_item_icon(item_name):
                    icon_paths = [
                        os.path.join(mod_folder, "sprites", "items", f"{item_name}.png"),
                        os.path.join("mindustry_mod_creator", "sprites", "items", f"{item_name}.png"),
                        os.path.join("mindustry_mod_creator", "icons", f"{item_name}.png")
                    ]
                    for path in icon_paths:
                        if os.path.exists(path):
                            try:
                                img = Image.open(path)
                                img = img.resize((50, 50), Image.LANCZOS)
                                return ctk.CTkImage(light_image=img, size=(50, 50))
                            except:
                                continue
                    return None
                
                # –°–ø–∏—Å–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
                default_items = [
                    "copper", "lead", "metaglass", "graphite", "sand", 
                    "coal", "titanium", "thorium", "scrap", "silicon",
                    "plastanium", "phase-fabric", "surge-alloy", "spore-pod", 
                    "blast-compound", "pyratite"
                ]
                
                mod_items = []
                mod_items_path = os.path.join(mod_folder, "content", "items")
                if os.path.exists(mod_items_path):
                    mod_items = [f.replace(".json", "") for f in os.listdir(mod_items_path) if f.endswith(".json")]

                default_item_entries = {}
                mod_item_entries = {}

                def create_item_card(parent, item, is_mod_item=False):
                    card_frame = ctk.CTkFrame(parent, 
                                            fg_color="#4a4a4a", 
                                            corner_radius=8,
                                            height=180)
                    card_frame.pack_propagate(False)
                    
                    content_frame = ctk.CTkFrame(card_frame, fg_color="transparent")
                    content_frame.pack(fill="both", expand=True, padx=10, pady=10)
                    
                    top_frame = ctk.CTkFrame(content_frame, fg_color="transparent")
                    top_frame.pack(fill="x", pady=(0, 10))
                    
                    icon = load_item_icon(item)
                    if icon:
                        ctk.CTkLabel(top_frame, image=icon, text="").pack()
                    
                    ctk.CTkLabel(top_frame, 
                                text=item.capitalize(), 
                                font=("Arial", 14),
                                anchor="center").pack()
                    
                    bottom_frame = ctk.CTkFrame(content_frame, fg_color="transparent")
                    bottom_frame.pack(fill="x", pady=(10, 0))

                    int_value = tk.IntVar(value=0)
                    str_value = tk.StringVar(value="0")
                    max_value = 25000

                    if "research" in block_data and "requirements" in block_data["research"]:
                        for req in block_data["research"]["requirements"]:
                            if req["item"] == item:
                                str_value.set(str(req["amount"]))
                                break

                    def sync_values(*args):
                        try:
                            val = str_value.get()
                            int_value.set(int(val) if val else 0)
                        except:
                            int_value.set(0)
                    
                    str_value.trace_add("write", sync_values)
                    
                    def validate_input(new_val):
                        if new_val == "":
                            return True
                        if not new_val.isdigit():
                            return False
                        if len(new_val) > 5:
                            return False
                        if int(new_val) > max_value:
                            return False
                        return True
                    
                    validation = parent.register(validate_input)
                    
                    controls_frame = ctk.CTkFrame(bottom_frame, fg_color="transparent")
                    controls_frame.pack(fill="x", pady=5)
                    
                    controls_frame.grid_columnconfigure(0, weight=0, minsize=35)
                    controls_frame.grid_columnconfigure(1, weight=1, minsize=70)
                    controls_frame.grid_columnconfigure(2, weight=0, minsize=35)

                    def start_increment(change):
                        global is_pressed
                        is_pressed = True
                        update_value(change)
                        root.after(100, lambda: repeat_increment(change))

                    def stop_increment():
                        global is_pressed
                        is_pressed = False

                    def repeat_increment(change):
                        if is_pressed:
                            update_value(change)
                            root.after(100, lambda: repeat_increment(change))
                    
                    def update_value(change):
                        try:
                            current = str_value.get()
                            try:
                                current_num = int(current) if current else 0
                            except ValueError:
                                current_num = 0
                            new_value = max(0, min(max_value, current_num + change))
                            str_value.set(str(new_value))
                        except Exception as e:
                            str_value.set("0")

                    minus_btn = ctk.CTkButton(
                        controls_frame,
                        text="-",
                        width=35,
                        height=35,
                        font=("Arial", 16),
                        fg_color="#e62525",
                        hover_color="#701c1c",
                        border_color="#701c1c",
                        corner_radius=6,
                        anchor="center",
                        command=lambda: update_value(-1)
                    )
                    minus_btn.bind("<ButtonPress-1>", lambda e: start_increment(-1))
                    minus_btn.bind("<ButtonRelease-1>", lambda e: stop_increment())
                    minus_btn.grid(row=0, column=0, padx=(0, 5), sticky="nsew")

                    entry = ctk.CTkEntry(
                        controls_frame,
                        width=70,
                        height=35,
                        font=("Arial", 14),
                        textvariable=str_value,
                        fg_color="#BE6F24",
                        border_color="#613e11",
                        justify="center",
                        validate="key",
                        validatecommand=(validation, "%P")
                    )
                    entry.grid(row=0, column=1, padx=5, sticky="ew")

                    plus_btn = ctk.CTkButton(
                        controls_frame,
                        text="+",
                        width=35,
                        height=35,
                        font=("Arial", 16),
                        corner_radius=6,
                        anchor="center",
                        command=lambda: update_value(1)
                    )
                    plus_btn.bind("<ButtonPress-1>", lambda e: start_increment(1))
                    plus_btn.bind("<ButtonRelease-1>", lambda e: stop_increment())
                    plus_btn.grid(row=0, column=2, padx=(5, 0), sticky="nsew")
                    
                    def handle_focus_out(event):
                        if str_value.get() == "":
                            str_value.set("0")
                    
                    entry.bind("<FocusOut>", handle_focus_out)
                    
                    if is_mod_item:
                        mod_item_entries[item] = int_value
                    else:
                        default_item_entries[item] = int_value
                    
                    return card_frame
                
                def calculate_columns(container_width):
                    min_card_width = 180
                    spacing = 10
                    max_columns = max(1, container_width // (min_card_width + spacing))
                    if max_columns * (min_card_width + spacing) - spacing <= container_width:
                        return max_columns, min_card_width
                    return 1, -1
                
                def update_grid(canvas, items_frame, items):
                    container_width = canvas.winfo_width()
                    if container_width < 1:
                        return
                    
                    columns, card_width = calculate_columns(container_width)
                    
                    for widget in items_frame.grid_slaves():
                        widget.grid_forget()
                    
                    for i, item in enumerate(items):
                        row = i // columns
                        col = i % columns
                        is_mod_item = item in mod_items
                        card = create_item_card(items_frame, item, is_mod_item)
                        if card_width == -1:
                            card.configure(width=container_width - 20)
                        else:
                            card.configure(width=card_width)
                        card.grid(row=row, column=col, padx=5, pady=5, sticky="nsew")
                    
                    items_frame.update_idletasks()
                    canvas.configure(scrollregion=canvas.bbox("all"))
                    
                    if items_frame.winfo_height() <= canvas.winfo_height():
                        canvas.yview_moveto(0)
                        scrollbar.pack_forget()
                    else:
                        scrollbar.pack(side="right", fill="y")
                
                # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
                canvas = tk.Canvas(content_frame, bg="#3a3a3a", highlightthickness=0)
                scrollbar = ctk.CTkScrollbar(content_frame, orientation="vertical", command=canvas.yview)
                canvas.configure(yscrollcommand=scrollbar.set)
                
                scrollbar.pack(side="right", fill="y")
                canvas.pack(side="left", fill="both", expand=True, padx=10, pady=10)
                
                items_frame = ctk.CTkFrame(canvas, fg_color="#3a3a3a")
                canvas.create_window((0, 0), window=items_frame, anchor="nw")

                def on_mousewheel(event):
                    canvas.yview_scroll(int(-1*(event.delta/120)), "units")
                canvas.bind_all("<MouseWheel>", on_mousewheel)
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫
                all_items = default_items + mod_items
                update_grid(canvas, items_frame, all_items)
                
                canvas.bind("<Configure>", lambda e: update_grid(canvas, items_frame, all_items))
                items_frame.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))
                
                footer_frame = ctk.CTkFrame(main_frame, height=70, fg_color="#3a3a3a", corner_radius=8)
                footer_frame.pack(fill="x", pady=(15, 0))
                
                btn_frame = ctk.CTkFrame(footer_frame, fg_color="transparent")
                btn_frame.pack(expand=True, pady=15)

                def save_requirements():
                    requirements = []
                    
                    for item, var in default_item_entries.items():
                        amount = var.get()
                        if amount > 0:
                            requirements.append({"item": item, "amount": amount})
                    
                    for item, var in mod_item_entries.items():
                        amount = var.get()
                        if amount > 0:
                            requirements.append({"item": item, "amount": amount})
                    
                    if not requirements:
                        messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞!")
                        return
                    
                    if "research" not in block_data:
                        block_data["research"] = {}
                    
                    block_data["research"]["requirements"] = requirements
                    
                    try:
                        with open(block_path, "w", encoding="utf-8") as f:
                            json.dump(block_data, f, indent=4, ensure_ascii=False)
                        
                        messagebox.showinfo("–£—Å–ø–µ—Ö", f"–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –±–ª–æ–∫–∞ '{block_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
                        —Å–æ–∑–¥–∞–Ω–∏–µ_–∫–Ω–æ–ø–∫–∏()
                    
                    except Exception as e:
                        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è: {str(e)}")
                
                ctk.CTkButton(btn_frame, 
                            text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", 
                            width=140, 
                            height=45,
                            font=("Arial", 14),
                            command=save_requirements).pack(side="left", padx=20)
                
                ctk.CTkButton(btn_frame, 
                            text="–û—Ç–º–µ–Ω–∞", 
                            width=140, 
                            height=45,
                            font=("Arial", 14),
                            fg_color="#e62525", 
                            hover_color="#701c1c", 
                            border_color="#701c1c",
                            command=—Å–æ–∑–¥–∞–Ω–∏–µ_–∫–Ω–æ–ø–∫–∏).pack(side="left", padx=20)

            def edit_requirements_from_parent():
                """–†–µ–¥–∞–∫—Ç–æ—Ä —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¥–ª—è –±–ª–æ–∫–∞, –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
                if not hasattr(root, 'current_block_item'):
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ë–ª–æ–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω")
                    return
                
                item = root.current_block_item
                block_name = item["name"]
                folder_path = os.path.dirname(item["full_path"])
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∞
                block_path = os.path.join(folder_path, f"{block_name}.json")
                if not os.path.exists(block_path):
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–§–∞–π–ª –±–ª–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {block_path}")
                    return
                
                with open(block_path, "r", encoding="utf-8") as f:
                    try:
                        block_data = json.load(f)
                    except json.JSONDecodeError:
                        messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON —Ñ–∞–π–ª –±–ª–æ–∫–∞.")
                        return
                
                clear_window()
                root.configure(fg_color="#2b2b2b")
                
                main_frame = ctk.CTkFrame(root, fg_color="transparent")
                main_frame.pack(padx=10, pady=10, fill="both", expand=True)
                
                header_frame = ctk.CTkFrame(main_frame, height=90, fg_color="#3a3a3a", corner_radius=8)
                header_frame.pack(fill="x", pady=(0, 15))
                
                try:
                    block_type = block_data.get("type")
                    texture_path = os.path.join(mod_folder, "sprites", block_type, block_name, f"{block_name}.png")
                    if not os.path.exists(texture_path):
                        texture_path = os.path.join(mod_folder, "sprites", block_type, f"{block_name}.png")
                    if os.path.exists(texture_path):
                        img = Image.open(texture_path)
                        img = img.resize((70, 70), Image.LANCZOS)
                        ctk_img = ctk.CTkImage(light_image=img, size=(70, 70))
                        img_label = ctk.CTkLabel(header_frame, image=ctk_img, text="")
                        img_label.pack(side="left", padx=20)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                
                ctk.CTkLabel(header_frame, 
                            text=f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –±–ª–æ–∫ –¥–ª—è: {block_name}",
                            font=("Arial", 18, "bold")).pack(side="left", padx=10)
                
                content_frame = ctk.CTkFrame(main_frame, fg_color="#3a3a3a", corner_radius=8)
                content_frame.pack(fill="both", expand=True)
                
                # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –±–ª–æ–∫–æ–≤ –∏–∑ –∫—ç—à–∞
                mod_name = os.path.basename(mod_folder)
                cache_path = os.path.join("mindustry_mod_creator", "cache", f"{mod_name}.json")
                blocks_list = []
                
                if os.path.exists(cache_path):
                    with open(cache_path, "r", encoding="utf-8") as f:
                        try:
                            cache_data = json.load(f)
                            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–ª–æ–∫–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {"type": "block_type", "name": "block_name"}
                            for block_type, blocks in cache_data.items():
                                if block_type == "_comment":
                                    continue
                                if isinstance(blocks, list):
                                    for block_name_in_cache in blocks:
                                        if block_name_in_cache:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∏–º–µ–Ω–∞
                                            blocks_list.append({
                                                "type": block_type,
                                                "name": block_name_in_cache
                                            })
                        except json.JSONDecodeError as e:
                            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON —Ñ–∞–π–ª –∫—ç—à–∞: {e}")
                            return
                
                # –§—Ä–µ–π–º –¥–ª—è —Å–ø–∏—Å–∫–∞ –±–ª–æ–∫–æ–≤ —Å grid layout
                blocks_frame = ctk.CTkFrame(content_frame, fg_color="transparent")
                blocks_frame.pack(fill="both", expand=True, padx=10, pady=10)
                
                # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—ã–π canvas
                canvas = tk.Canvas(blocks_frame, bg="#3a3a3a", highlightthickness=0)
                scrollbar = ctk.CTkScrollbar(blocks_frame, orientation="vertical", command=canvas.yview)
                canvas.configure(yscrollcommand=scrollbar.set)
                
                scrollbar.pack(side="right", fill="y")
                canvas.pack(side="left", fill="both", expand=True)
                
                inner_frame = ctk.CTkFrame(canvas, fg_color="transparent")
                canvas_window = canvas.create_window((0, 0), window=inner_frame, anchor="nw")
                
                # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
                def on_mousewheel(event):
                    try:
                        if canvas.winfo_exists():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ canvas
                            canvas.yview_scroll(int(-1*(event.delta/120)), "units")
                    except:
                        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ canvas –±—ã–ª —É–Ω–∏—á—Ç–æ–∂–µ–Ω
                
                # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–æ–ª–µ—Å–æ –º—ã—à–∏ –∫ canvas
                canvas.bind("<MouseWheel>", on_mousewheel)
                inner_frame.bind("<MouseWheel>", lambda e: canvas.event_generate("<MouseWheel>", delta=e.delta))
                
                def on_canvas_configure(event):
                    canvas.configure(scrollregion=canvas.bbox("all"))
                    # –û–±–Ω–æ–≤–ª—è–µ–º —à–∏—Ä–∏–Ω—É –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ñ—Ä–µ–π–º–∞
                    canvas.itemconfig(canvas_window, width=canvas.winfo_width())
                
                canvas.bind("<Configure>", on_canvas_configure)
                
                def load_block_icon(block_info):
                    if not isinstance(block_info, dict):
                        print("–û—à–∏–±–∫–∞: block_info –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º")
                        return None
                        
                    block_name = block_info.get("name")
                    if not block_name:
                        print("–û—à–∏–±–∫–∞: –í block_info –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç 'name'")
                        return None
                    
                    block_types = {
                        "LiquidRouter",
                        "conveyor",
                        "wall",
                        "GenericCrafter",
                        "SolarGenerator",
                        "StorageBlock",
                        "conduit",
                        "ConsumeGenerator",
                        "PowerNode",
                        "Router",
                        "Junction",
                        "Unloader",
                        "LiquidJunction",
                        "Battery",
                        "ThermalGenerator"
                    }
                    block_types = {t for t in block_types if t is not None}

                    search_paths = []
                    for block_type in block_types:
                        search_paths.extend([
                            os.path.join(mod_folder, "sprites", block_type, block_name, f"{block_name}.png"),
                            os.path.join(mod_folder, "sprites", block_type, f"{block_name}.png")
                        ])
                    
                    search_paths.extend([
                        os.path.join("mindustry_mod_creator", "icons", f"{block_name}.png")
                    ])
                    
                    for path in search_paths:
                        if os.path.exists(path):
                            try:
                                img = Image.open(path)
                                img = img.resize((50, 50), Image.LANCZOS)
                                return ctk.CTkImage(light_image=img, size=(50, 50))
                            except Exception as e:
                                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {path}: {e}")
                                continue
                    try:
                        print(f"–¢–µ–∫—Å—Ç—É—Ä–∞ –¥–ª—è –±–ª–æ–∫–∞ {block_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞")
                        empty_img = Image.new('RGBA', (50, 50), (100, 100, 100, 255))
                        return ctk.CTkImage(light_image=empty_img, size=(50, 50))
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≥–ª—É—à–∫–∏: {e}")
                        return None
                
                def create_block_card(parent, block_info):
                    block_type = block_info["type"]
                    block_name_in_cache = block_info["name"]
                    
                    card_frame = ctk.CTkFrame(parent, 
                                            fg_color="#4a4a4a", 
                                            corner_radius=8,
                                            width=200,
                                            height=220)
                    card_frame.pack_propagate(False)
                    
                    content_frame = ctk.CTkFrame(card_frame, fg_color="transparent")
                    content_frame.pack(fill="both", expand=True, padx=10, pady=10)
                    
                    # –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å —Å –∏–∫–æ–Ω–∫–æ–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                    top_frame = ctk.CTkFrame(content_frame, fg_color="transparent")
                    top_frame.pack(fill="both", expand=True)
                    
                    icon = load_block_icon(block_info)
                    if icon:
                        ctk.CTkLabel(top_frame, image=icon, text="").pack(pady=5)
                    
                    ctk.CTkLabel(top_frame, 
                                text=block_name_in_cache,
                                font=("Arial", 14, "bold"),
                                anchor="center").pack()
                    
                    ctk.CTkLabel(top_frame, 
                                text=f"–¢–∏–ø: {block_type}",
                                font=("Arial", 11),
                                anchor="center").pack()
                    
                    # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞
                    def on_select():
                        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –±–ª–æ–∫ –∫–∞–∫ parent
                        if "research" not in block_data:
                            block_data["research"] = {"parent": block_name_in_cache}
                        else:
                            block_data["research"]["parent"] = block_name_in_cache
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                        try:
                            with open(block_path, "w", encoding="utf-8") as f:
                                json.dump(block_data, f, indent=4, ensure_ascii=False)
                            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –±–ª–æ–∫ '{block_name_in_cache}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                            edit_requirements_from_context()
                        except Exception as e:
                            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: {e}")
                    
                    ctk.CTkButton(content_frame, 
                                text="–í—ã–±—Ä–∞—Ç—å", 
                                command=on_select).pack(pady=5)
                    
                    return card_frame
                
                # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ grid layout
                columns = 4  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                row = 0
                col = 0
                
                for i, block_info in enumerate(blocks_list):
                    if i % columns == 0 and i != 0:
                        row += 1
                        col = 0
                    
                    card = create_block_card(inner_frame, block_info)
                    card.grid(row=row, column=col, padx=5, pady=5, sticky="nsew")
                    inner_frame.grid_columnconfigure(col, weight=1)
                    col += 1
                
                # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
                buttons_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
                buttons_frame.pack(fill="x", pady=(10, 0))
                
                ctk.CTkButton(buttons_frame, 
                            text="–û—Ç–º–µ–Ω–∞", 
                            command=lambda:—Å–æ–∑–¥–∞–Ω–∏–µ_–∫–Ω–æ–ø–∫–∏(),
                            fg_color="#e62525",
                            hover_color="#701c1c").pack(side="right", padx=10)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                inner_frame.update_idletasks()
                canvas.configure(scrollregion=canvas.bbox("all"))
                
                # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–ª–æ–Ω–æ–∫
                def update_columns(event=None):
                    nonlocal columns
                    canvas_width = canvas.winfo_width()
                    if canvas_width > 1:
                        new_columns = max(1, canvas_width // 210)  # 200 (—à–∏—Ä–∏–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∏) + 10 (–æ—Ç—Å—Ç—É–ø—ã)
                        if new_columns != columns:
                            columns = new_columns
                            rearrange_cards()
                
                def rearrange_cards():
                    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
                    for widget in inner_frame.winfo_children():
                        widget.destroy()
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–Ω–æ–≤–æ —Å –Ω–æ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–æ–ª–æ–Ω–æ–∫
                    row = 0
                    col = 0
                    for i, block_info in enumerate(blocks_list):
                        if i % columns == 0 and i != 0:
                            row += 1
                            col = 0
                        
                        card = create_block_card(inner_frame, block_info)
                        card.grid(row=row, column=col, padx=5, pady=5, sticky="nsew")
                        inner_frame.grid_columnconfigure(col, weight=1)
                        col += 1
                    
                    inner_frame.update_idletasks()
                    canvas.configure(scrollregion=canvas.bbox("all"))
                
                # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
                canvas.bind("<Configure>", lambda e: (on_canvas_configure(e), update_columns(e)))
                update_columns()

            def paint(item=None):
                """–†–µ–¥–∞–∫—Ç–æ—Ä –ø–∏–∫—Å–µ–ª—å–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫–∏ 32x32 —Å —à–∞–±–ª–æ–Ω–∞–º–∏"""
                ctk.set_default_color_theme("blue")  # –ò–ª–∏ "green", "dark-blue" ‚Äî –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ç–µ–º—ã
                # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
                global current_color, grid_size, cell_size, canvas_size, current_tool, history, history_index, is_drawing, save_path
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
                current_color = "#000000"
                grid_size = 32
                cell_size = 20
                canvas_size = grid_size * cell_size
                current_tool = "pencil"
                history = []
                history_index = -1
                is_drawing = False

                if item is not None:
                    if "full_path" in item:
                        if "items" in item["full_path"]:
                            content_type = "items"
                        elif "liquids" in item["full_path"]:
                            content_type = "liquids"
                
                templates_dir = os.path.join("mindustry_mod_creator", "icons", "paint", content_type)
                os.makedirs(templates_dir, exist_ok=True)
                
                if item is None:
                    save_dir = os.path.join("mindustry_mod_creator", "icons", "paint")
                    os.makedirs(save_dir, exist_ok=True)
                    save_path = os.path.join(save_dir, "new_image.png")
                    item_name = "new_image"
                else:
                    item_name = item.get("name", "unnamed")
                    content_type = item.get("type", "items")
                    
                    possible_paths = [
                        os.path.join(mod_folder, "sprites", content_type, item_name, f"{item_name}.png"),
                        os.path.join(mod_folder, "sprites", content_type, f"{item_name}.png"),
                        os.path.join(mod_folder, "sprites", "items", f"{item_name}.png"),
                        os.path.join(mod_folder, "sprites", "liquids", f"{item_name}.png"),
                        os.path.join(os.path.dirname(item.get("full_path", "")), f"{item_name}.png")
                    ]
                    
                    for path in possible_paths:
                        if os.path.exists(path):
                            save_path = path
                            break
                    else:
                        save_dir = os.path.dirname(item.get("full_path", mod_folder))
                        os.makedirs(save_dir, exist_ok=True)
                        save_path = os.path.join(save_dir, f"{item_name}.png")

                # --- –§—É–Ω–∫—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ ---
                def save_state():
                    global history, history_index
                    
                    if history_index < len(history) - 1:
                        history = history[:history_index + 1]
                    
                    state = []
                    for x in range(grid_size):
                        row = []
                        for y in range(grid_size):
                            items = canvas.find_withtag(f"pixel_{x}_{y}")
                            color = None
                            if items:
                                color = canvas.itemcget(items[0], "fill")
                            row.append(color)
                        state.append(row)
                    
                    history.append(state)
                    history_index = len(history) - 1

                def undo():
                    global history_index
                    if history_index > 0:
                        history_index -= 1
                        restore_state()

                def redo():
                    global history_index
                    if history_index < len(history) - 1:
                        history_index += 1
                        restore_state()

                def restore_state():
                    state = history[history_index]
                    canvas.delete("all")
                    draw_grid()
                    
                    for x in range(grid_size):
                        for y in range(grid_size):
                            if state[x][y] is not None:
                                canvas.create_rectangle(
                                    x * cell_size, y * cell_size,
                                    (x + 1) * cell_size, (y + 1) * cell_size,
                                    fill=state[x][y], outline="", tags=f"pixel_{x}_{y}"
                                )

                # --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∏—Å–æ–≤–∞–Ω–∏—è ---
                def start_drawing(event):
                    global is_drawing
                    is_drawing = True
                    draw_pixel(event)
                    save_state()

                def draw_pixel(event):
                    if not is_drawing:
                        return
                        
                    x = event.x // cell_size
                    y = event.y // cell_size
                    if 0 <= x < grid_size and 0 <= y < grid_size:
                        canvas.delete(f"pixel_{x}_{y}")
                        if current_tool == "eraser":
                            return
                        elif current_tool in ["pencil", "fill"]:
                            canvas.create_rectangle(
                                x * cell_size, y * cell_size,
                                (x + 1) * cell_size, (y + 1) * cell_size,
                                fill=current_color, outline="", tags=f"pixel_{x}_{y}"
                            )

                def stop_drawing(event):
                    global is_drawing
                    is_drawing = False
                    save_state()

                def flood_fill(x, y, target_color, replacement_color):
                    if target_color == replacement_color:
                        return
                    if x < 0 or x >= grid_size or y < 0 or y >= grid_size:
                        return
                    
                    items = canvas.find_withtag(f"pixel_{x}_{y}")
                    current_pixel_color = None
                    if items:
                        current_pixel_color = canvas.itemcget(items[0], "fill")
                    
                    if current_pixel_color != target_color:
                        return
                    
                    canvas.delete(f"pixel_{x}_{y}")
                    canvas.create_rectangle(
                        x * cell_size, y * cell_size,
                        (x + 1) * cell_size, (y + 1) * cell_size,
                        fill=replacement_color, outline="", tags=f"pixel_{x}_{y}"
                    )
                    
                    flood_fill(x+1, y, target_color, replacement_color)
                    flood_fill(x-1, y, target_color, replacement_color)
                    flood_fill(x, y+1, target_color, replacement_color)
                    flood_fill(x, y-1, target_color, replacement_color)

                def handle_click(event):
                    x = event.x // cell_size
                    y = event.y // cell_size
                    if 0 <= x < grid_size and 0 <= y < grid_size:
                        if current_tool == "fill":
                            save_state()
                            items = canvas.find_withtag(f"pixel_{x}_{y}")
                            target_color = None
                            if items:
                                target_color = canvas.itemcget(items[0], "fill")
                            flood_fill(x, y, target_color, current_color)
                            save_state()
                        else:
                            start_drawing(event)

                def change_color():
                    global current_color
                    color = colorchooser.askcolor(title="–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç", initialcolor=current_color)
                    if color[1]:
                        current_color = color[1]
                        color_button.configure(fg_color=current_color)
                        set_tool("pencil")

                def clear_canvas():
                    canvas.delete("all")
                    draw_grid()
                    save_state()

                def draw_grid():
                    # –¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω
                    canvas.configure(bg="#e0e0e0")
                    for i in range(grid_size + 1):
                        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ (—Ç–æ–ª—â–∏–Ω–∞ 2 –ø–∏–∫—Å–µ–ª—è)
                        canvas.create_line(
                            i * cell_size, 0, 
                            i * cell_size, canvas_size, 
                            fill="#d0d0d0", width=2  # ‚Üê –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä width
                        )
                        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ (—Ç–æ–ª—â–∏–Ω–∞ 2 –ø–∏–∫—Å–µ–ª—è)
                        canvas.create_line(
                            0, i * cell_size, 
                            canvas_size, i * cell_size, 
                            fill="#d0d0d0", width=2  # ‚Üê –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä width
                        )

                def save_image():
                    img = Image.new("RGBA", (grid_size, grid_size), (0, 0, 0, 0))
                    pixels = img.load()
                    
                    for x in range(grid_size):
                        for y in range(grid_size):
                            items = canvas.find_withtag(f"pixel_{x}_{y}")
                            if items:
                                color = canvas.itemcget(items[0], "fill")
                                if color:
                                    try:
                                        r, g, b = tuple(int(color.lstrip('#')[i:i+2], 16) for i in (0, 2, 4))
                                        pixels[x, y] = (r, g, b, 255)
                                    except:
                                        pixels[x, y] = (0, 0, 0, 255)
                    
                    img.save(save_path)
                    messagebox.showinfo("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ", f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤:\n{save_path}")

                def set_tool(tool):
                    global current_tool
                    current_tool = tool
                    
                    pencil_button.configure(fg_color="#2b2b2b")
                    eraser_button.configure(fg_color="#2b2b2b")
                    fill_button.configure(fg_color="#2b2b2b")
                    
                    if tool == "pencil":
                        pencil_button.configure(fg_color="#1f6aa5")
                    elif tool == "eraser":
                        eraser_button.configure(fg_color="#1f6aa5")
                    elif tool == "fill":
                        fill_button.configure(fg_color="#1f6aa5")

                def load_template_image(path):
                    try:
                        img = Image.open(path)
                        
                        if img.size != (32, 32):
                            img = img.resize((32, 32), Image.NEAREST)
                        
                        if img.mode != "RGBA":
                            img = img.convert("RGBA")
                        
                        pixels = img.load()
                        
                        clear_canvas()
                        
                        for x in range(32):
                            for y in range(32):
                                pixel = pixels[x, y]
                                if len(pixel) == 4:
                                    r, g, b, a = pixel
                                    if a > 0:
                                        color = f"#{r:02x}{g:02x}{b:02x}"
                                        canvas.create_rectangle(
                                            x * cell_size, y * cell_size,
                                            (x + 1) * cell_size, (y + 1) * cell_size,
                                            fill=color, outline="", tags=f"pixel_{x}_{y}"
                                        )
                        save_state()
                    except Exception as e:
                        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω: {e}")

                def show_templates():
                    templates = []
                    if os.path.exists(templates_dir):
                        for file in os.listdir(templates_dir):
                            if file.endswith(".png"):
                                templates.append({
                                    "name": file[:-4],
                                    "path": os.path.join(templates_dir, file)
                                })
                    
                    if not templates:
                        messagebox.showinfo("–®–∞–±–ª–æ–Ω—ã", f"–í –ø–∞–ø–∫–µ —à–∞–±–ª–æ–Ω–æ–≤ ({content_type}) –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                        return
                    
                    template_window = ctk.CTkToplevel(paint_window)
                    template_window.title("–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω")
                    template_window.geometry("600x400")
                    
                    scroll_frame = ctk.CTkScrollableFrame(template_window)
                    scroll_frame.pack(fill="both", expand=True, padx=10, pady=10)
                    
                    for template in templates:
                        try:
                            img = Image.open(template["path"])
                            img = img.resize((64, 64), Image.NEAREST)
                            ctk_img = ctk.CTkImage(light_image=img, size=(64, 64))
                            
                            frame = ctk.CTkFrame(scroll_frame)
                            frame.pack(fill="x", pady=5)
                            
                            ctk.CTkLabel(frame, image=ctk_img, text="").pack(side="left", padx=10)
                            ctk.CTkLabel(frame, text=template["name"], font=("Arial", 14)).pack(side="left", padx=10)
                            
                            def load_template(path=template["path"]):
                                load_template_image(path)
                                template_window.destroy()
                            
                            ctk.CTkButton(frame, text="–ó–∞–≥—Ä—É–∑–∏—Ç—å", command=load_template).pack(side="right", padx=10)
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞ {template['name']}: {e}")

                # --- –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ---
                paint_window = ctk.CTkToplevel(root)
                paint_window.title(f"32x32 Pixel Editor - {item_name}")
                paint_window.resizable(False, False)

                canvas = ctk.CTkCanvas(paint_window, bg="#e0e0e0", width=canvas_size, height=canvas_size, highlightthickness=0)
                canvas.pack()

                tool_frame = ctk.CTkFrame(paint_window, fg_color="transparent")
                tool_frame.pack(fill="x", pady=(10, 0))

                ctk.CTkButton(
                    tool_frame,
                    text="< –û—Ç–º–µ–Ω–∞",
                    command=undo,
                    width=80,
                    fg_color="#555555",
                    hover_color="#444444"
                ).pack(side="left", padx=2)

                ctk.CTkButton(
                    tool_frame,
                    text="–ü–æ–≤—Ç–æ—Ä >",
                    command=redo,
                    width=80,
                    fg_color="#555555",
                    hover_color="#444444"
                ).pack(side="left", padx=2)

                pencil_button = ctk.CTkButton(
                    tool_frame, 
                    text="–ö–∞—Ä–∞–Ω–¥–∞—à",
                    command=lambda: set_tool("pencil"),
                    width=80,
                    fg_color="#1f6aa5"
                )
                pencil_button.pack(side="left", padx=5)

                eraser_button = ctk.CTkButton(
                    tool_frame,
                    text="–õ–∞—Å—Ç–∏–∫",
                    command=lambda: set_tool("eraser"),
                    width=80
                )
                eraser_button.pack(side="left", padx=5)

                fill_button = ctk.CTkButton(
                    tool_frame,
                    text="–ó–∞–ª–∏–≤–∫–∞",
                    command=lambda: set_tool("fill"),
                    width=80
                )
                fill_button.pack(side="left", padx=5)

                color_button = ctk.CTkButton(
                    tool_frame, 
                    text="–¶–≤–µ—Ç", 
                    command=change_color,
                    fg_color=current_color,
                    hover_color=current_color,
                    width=80
                )
                color_button.pack(side="left", padx=5)

                ctk.CTkButton(
                    tool_frame,
                    text="–û—á–∏—Å—Ç–∏—Ç—å",
                    command=clear_canvas,
                    width=80
                ).pack(side="left", padx=5)

                ctk.CTkButton(
                    tool_frame,
                    text="–®–∞–±–ª–æ–Ω—ã",
                    command=show_templates,
                    width=80,
                    fg_color="#4CAF50",
                    hover_color="#388E3C"
                ).pack(side="left", padx=5)

                ctk.CTkButton(
                    tool_frame,
                    text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                    command=save_image,
                    width=80
                ).pack(side="left", padx=5)

                canvas.bind("<B1-Motion>", draw_pixel)
                canvas.bind("<Button-1>", handle_click)
                canvas.bind("<ButtonRelease-1>", stop_drawing)

                draw_grid()

                ctk.ThemeManager.theme = theme
                
                if os.path.exists(save_path):
                    try:
                        img = Image.open(save_path)
                        if img.size != (grid_size, grid_size):
                            img = img.resize((grid_size, grid_size), Image.NEAREST)
                        
                        if img.mode != "RGBA":
                            img = img.convert("RGBA")
                        
                        pixels = img.load()
                        for x in range(grid_size):
                            for y in range(grid_size):
                                r, g, b, a = pixels[x, y]
                                if a > 0:
                                    color = f"#{r:02x}{g:02x}{b:02x}"
                                    canvas.create_rectangle(
                                        x * cell_size, y * cell_size,
                                        (x + 1) * cell_size, (y + 1) * cell_size,
                                        fill=color, outline="", tags=f"pixel_{x}_{y}"
                                    )
                        save_state()
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                        save_state()
                else:
                    save_state()

            def shem_import():
                appdata_path = os.getenv('APPDATA')
                if not appdata_path:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–∞–ø–∫—É AppData")
                    return
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å—Ö–µ–º Mindustry
                mindustry_schematics = os.path.join(appdata_path, 'Mindustry', 'schematics')
                
                file_path = filedialog.askopenfilename(
                    title="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ö–µ–º—É",
                    filetypes=(("–°—Ö–µ–º—ã", "*.msch"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")),
                    initialdir=mindustry_schematics
                )
                if not file_path:
                    return
                
                dest_dir = os.path.join(mod_folder, "schematics")
                
                try:
                    os.makedirs(dest_dir, exist_ok=True)
                    
                    counter = 1
                    while True:
                        new_filename = f"{counter}.msch"
                        des_path = os.path.join(dest_dir, new_filename)
                        if not os.path.exists(des_path):
                            break
                        counter += 1
                        if counter > 100:
                            messagebox.showerror("–û—à–∏–±–∫–∞", "–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ñ–∞–π–ª–æ–≤ (100)")
                            return

                    shutil.copy2(file_path, des_path)

                    messagebox.showinfo("–£—Å–ø–µ—Ö", f"–°—Ö–µ–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞–∫ {new_filename}")
                    
                except Exception as e:
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"{str(e)}")

            global mod_folder
            mod_folder = os.path.join("mindustry_mod_creator", "mods", f"{mod_name}")
            
            clear_window()
            root.configure(fg_color="#2b2b2b")

            # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            main_frame = ctk.CTkFrame(root, fg_color="transparent")
            main_frame.pack(fill="both", expand=True, padx=10, pady=10)

            # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
            left_panel = ctk.CTkFrame(main_frame, width=200, fg_color="#3a3a3a", corner_radius=8)
            left_panel.pack(side="left", fill="y", padx=(0, 10))
            left_panel.pack_propagate(False)

            # –ö–Ω–æ–ø–∫–∏ –≤ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏
            action_buttons = [
                ("üß± –°–æ–∑–¥–∞—Ç—å –±–ª–æ–∫", lambda: create_block(mod_name)),
                ("üì¶ –°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç", create_item_window),
                ("üíß –°–æ–∑–¥–∞—Ç—å –∂–∏–¥–∫–æ—Å—Ç—å", create_liquid_window)
            ]

            action_buttons_2 = [
                ("üìÅ –°–æ–∑–¥–∞—Ç—å ZIP", create_zip),
                ("üìÇ –û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É", open_mod_folder)
            ]

            for text, cmd in action_buttons:
                btn = ctk.CTkButton(
                    left_panel,
                    hover_color="#800000", border_color="#800000",
                    text=text,
                    width=180,
                    height=40,
                    font=("Arial", 14),
                    anchor="w",
                    command=cmd
                )
                btn.pack(pady=5, padx=10, fill="x")

            for text, cmd in action_buttons_2:
                btn = ctk.CTkButton(
                    left_panel,
                    hover_color="#001380", border_color="#001380",
                    text=text,
                    width=180,
                    height=40,
                    font=("Arial", 14),
                    anchor="w",
                    command=cmd
                )
                btn.pack(pady=5, padx=10, fill="x")

            # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
            content_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
            content_frame.pack(side="right", fill="both", expand=True)

            # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            tabs = ctk.CTkTabview(content_frame)
            tabs.pack(fill="both", expand=True)
            
            # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
            tabs.add("–ë–ª–æ–∫–∏")
            tabs.add("–ü—Ä–µ–¥–º–µ—Ç—ã") 
            tabs.add("–ñ–∏–¥–∫–æ—Å—Ç–∏")

            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            def load_content(tab_name, content_type):
                tab = tabs.tab(tab_name)
                
                # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –±–µ–∑ –æ—Ç—Å—Ç—É–ø–æ–≤
                main_frame = ctk.CTkFrame(tab, fg_color="#2b2b2b")
                main_frame.pack(fill="both", expand=True, padx=0, pady=0)

                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞
                canvas = tk.Canvas(main_frame, bg="#2b2b2b", highlightthickness=0)
                scrollbar = ctk.CTkScrollbar(main_frame, command=canvas.yview)
                canvas.configure(yscrollcommand=scrollbar.set)
                
                scrollbar.pack(side="right", fill="y")
                canvas.pack(side="left", fill="both", expand=True, padx=0, pady=0)

                # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
                content_frame = ctk.CTkFrame(canvas, fg_color="#2b2b2b")
                canvas.create_window((0, 0), window=content_frame, anchor="nw")

                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
                items = []
                content_path = os.path.join(mod_folder, "content", content_type)
                
                if not os.path.exists(content_path):
                    ctk.CTkLabel(content_frame, text=f"–ü–∞–ø–∫–∞ {content_type} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞").pack(pady=20)
                    return

                if content_type == "blocks":
                    for block_type in os.listdir(content_path):
                        type_path = os.path.join(content_path, block_type)
                        if os.path.isdir(type_path):
                            for file in os.listdir(type_path):
                                if file.endswith(".json"):
                                    items.append({
                                        "name": os.path.splitext(file)[0],
                                        "type": block_type,
                                        "full_path": os.path.join(type_path, file)
                                    })
                else:
                    for file in os.listdir(content_path):
                        if file.endswith(".json"):
                            items.append({
                                "name": os.path.splitext(file)[0],
                                "full_path": os.path.join(content_path, file)
                            })

                if not items:
                    ctk.CTkLabel(content_frame, text=f"–ù–µ—Ç {content_type} –≤ –º–æ–¥–µ").pack(pady=20)
                    return

                # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—Ä—Ç–æ—á–µ–∫
                CARD_WIDTH = 170
                CARD_HEIGHT = 170
                MARGIN = 15  # –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
                
                # –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
                def create_card(parent, item):
                    card = ctk.CTkFrame(
                        parent,
                        width=CARD_WIDTH,
                        height=CARD_HEIGHT,
                        fg_color="#3a3a3a",
                        corner_radius=8,
                        border_width=1,
                        border_color="#4a4a4a"
                    )
                    card.pack_propagate(False)
                    
                    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∫–æ–Ω–∫–∏
                    try:
                        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –≤–æ–∑–º–æ–∂–Ω—ã–º –ø—É—Ç—è–º
                        def find_image_path(possible_paths):
                            for path in possible_paths:
                                if os.path.exists(path):
                                    return path
                            return None

                        # –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è CTkImage –∏–∑ –ø—É—Ç–∏
                        def create_ctk_image(img_path, size=(80, 80)):
                            if img_path and os.path.exists(img_path):
                                try:
                                    return ctk.CTkImage(Image.open(img_path), size=size)
                                except Exception as e:
                                    print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {img_path}: {e}")
                            return None

                        # –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—É—Ç–µ–π –¥–ª—è —Å–ª–æ—è
                        def generate_layer_paths(mod_folder, item, content_type, layer_filename):
                            sprite_type = item.get("type", content_type)
                            base_paths = []
                            
                            # –û—Å–æ–±—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è conduit –∏ conveyor
                            if item.get("type") == "conduit":
                                base_paths = [
                                    os.path.join(mod_folder, "sprites", "conduit", item["name"], layer_filename),
                                    os.path.join(mod_folder, "sprites", "conduit", layer_filename)
                                ]
                            elif item.get("type") == "conveyor":
                                base_paths = [
                                    os.path.join(mod_folder, "sprites", "conveyor", item["name"], layer_filename),
                                    os.path.join(mod_folder, "sprites", "conveyor", layer_filename)
                                ]
                            else:
                                # –û–±—â–∏–µ –ø—É—Ç–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤
                                base_paths = [
                                    os.path.join(mod_folder, "sprites", sprite_type, item["name"], layer_filename),
                                    os.path.join(mod_folder, "sprites", sprite_type, layer_filename),
                                    os.path.join(mod_folder, "sprites", "items", item["name"], layer_filename),
                                    os.path.join(mod_folder, "sprites", "items", layer_filename),
                                    os.path.join(mod_folder, "sprites", "liquids", item["name"], layer_filename),
                                    os.path.join(mod_folder, "sprites", "liquids", layer_filename)
                                ]
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π –ø—É—Ç—å –≤ sprites
                            base_paths.append(os.path.join(mod_folder, "sprites", layer_filename))
                            return base_paths

                        # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        layers = item.get("layers", [
                            ["{name}.png", 1],
                            ["{name}-rotator.png", 2],
                            ["{name}-top.png", 3]
                        ])

                        img = None

                        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ª–æ–∏ –¥–ª—è –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
                        if layers:
                            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–∏ –ø–æ –Ω–æ–º–µ—Ä—É (—á–µ–º –±–æ–ª—å—à–µ —Ü–∏—Ñ—Ä–∞, —Ç–µ–º –≤—ã—à–µ —Å–ª–æ–π)
                            sorted_layers = sorted(layers, key=lambda x: x[1])
                            temp_image = None
                            
                            for layer_template, layer_number in sorted_layers:
                                # –ó–∞–º–µ–Ω—è–µ–º {name} –Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∏–º—è –ø—Ä–µ–¥–º–µ—Ç–∞
                                layer_filename = layer_template.replace("{name}", item["name"])
                                
                                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è —Å–ª–æ—è
                                possible_paths = generate_layer_paths(mod_folder, item, content_type, layer_filename)
                                layer_img_path = find_image_path(possible_paths)
                                
                                if not layer_img_path:
                                    continue
                                    
                                try:
                                    layer_img = Image.open(layer_img_path).convert("RGBA")
                                    
                                    # –ï—Å–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ
                                    if temp_image is None:
                                        temp_image = Image.new("RGBA", layer_img.size, (0, 0, 0, 0))
                                    
                                    # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ª–æ–π –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                                    temp_image = Image.alpha_composite(temp_image, layer_img)
                                    
                                except Exception as e:
                                    print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–æ—è {layer_filename}: {e}")
                                    continue
                            
                            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ —Å–ª–æ–∏ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
                            if temp_image is not None:
                                img = ctk.CTkImage(temp_image, size=(80, 80))
                        
                        # –ï—Å–ª–∏ —Å–ª–æ–µ–≤ –Ω–µ—Ç –∏–ª–∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –ª–æ–≥–∏–∫—É
                        if img is None:
                            sprite_type = item.get("type", content_type)
                            base_filename = f"{item['name']}.png"
                            
                            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                            possible_paths = generate_layer_paths(mod_folder, item, content_type, base_filename)
                            img_path = find_image_path(possible_paths)
                            
                            if img_path:
                                img = create_ctk_image(img_path)

                    except Exception as e:
                        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è {item.get('name', 'unknown')}: {e}")
                        img = None
                    
                    ctk.CTkLabel(card, image=img, text="X" if not img else "", 
                                font=("Arial", 40) if not img else None).pack(pady=(10, 5))
                    
                    if "type" in item:
                        ctk.CTkLabel(card, text=item["type"], font=("Arial", 12, "bold")).pack(pady=(0, 5))
                    
                    ctk.CTkLabel(card, text=item["name"], font=("Arial", 12, "bold"),
                                wraplength=CARD_WIDTH-20).pack(pady=(0, 15))
                    
                    # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
                    menu = tk.Menu(root, tearoff=0)
                    menu.add_command(label="–£–¥–∞–ª–∏—Ç—å", command=lambda: delete_item(item, content_type))
                    menu.add_command(label="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å JSON", command=lambda: edit_item_json(item["full_path"]))
                    
                    if content_type in ["items", "liquids"]:
                        menu.add_command(label="–†–µ–¥–∞–∫—Ç–æ—Ä —Ñ–æ—Ç–æ", command=lambda item=item: paint(item))
                    elif content_type == "blocks":
                        menu.add_command(label="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è", 
                                        command=lambda: [setattr(root, 'current_block_item', item), edit_requirements_from_parent()])
                    
                    def show_menu(e):
                        try: menu.tk_popup(e.x_root, e.y_root)
                        finally: menu.grab_release()
                    
                    card.bind("<Button-3>", show_menu)
                    card.bind("<Double-Button-1>", lambda e: edit_item_json(item["full_path"]))
                    
                    return card

                # –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫
                def place_cards():
                    canvas.update_idletasks()
                    width = canvas.winfo_width()
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
                    cards_per_row = max(1, width // (CARD_WIDTH + MARGIN))
                    remaining_space = width - (cards_per_row * (CARD_WIDTH + MARGIN))
                    
                    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ
                    for widget in content_frame.winfo_children():
                        widget.destroy()
                    
                    current_row = None
                    for i, item in enumerate(items):
                        if i % cards_per_row == 0:
                            current_row = ctk.CTkFrame(content_frame, fg_color="transparent")
                            current_row.pack(fill="x", pady=0)
                        
                        card = create_card(current_row, item)
                        card.pack(side="left", padx=MARGIN//2)
                        
                        # –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
                        if i % cards_per_row == cards_per_row - 1 and remaining_space > 0:
                            extra = ctk.CTkFrame(current_row, width=remaining_space, fg_color="transparent")
                            extra.pack(side="left")

                    content_frame.update_idletasks()
                    canvas.configure(scrollregion=canvas.bbox("all"))

                # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Å–∞–π–∑–∞
                place_cards()
                canvas.bind("<Configure>", lambda e: place_cards())

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∫–ª–∞–¥–∫–∏
            load_content("–ë–ª–æ–∫–∏", "blocks")
            load_content("–ü—Ä–µ–¥–º–µ—Ç—ã", "items") 
            load_content("–ñ–∏–¥–∫–æ—Å—Ç–∏", "liquids")

        def create_item_window():
            """–§–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞"""
            clear_window()

            ctk.CTkLabel(root, text="–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞", font=("Arial", 16, "bold")).pack(pady=10)

            form_frame = ctk.CTkFrame(root)
            form_frame.pack(pady=10)

            fields = [
                ("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞", 150),
                ("–û–ø–∏—Å–∞–Ω–∏–µ", 150),
                ("–í–æ—Å–ø–ª–∞–º–µ–Ω—è–µ–º–æ—Å—Ç—å (0-1)", 150),
                ("–í–∑—Ä—ã–≤–æ–æ–ø–∞—Å–Ω–æ—Å—Ç—å (0-1)", 150),
                ("–†–∞–¥–∏–æ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (0-1)", 150),
                ("–ó–∞—Ä—è–¥ (0-1)", 150),
                ("–¶–≤–µ—Ç (#rrggbb)", 150)
            ]

            entries = []

            for i, (label_text, width) in enumerate(fields):
                label = ctk.CTkLabel(form_frame, text=label_text)
                entry = ctk.CTkEntry(form_frame, width=width)
                label.grid(row=i, column=0, sticky="w", pady=5, padx=10)
                entry.grid(row=i, column=1, pady=5, padx=10)
                entries.append(entry)

            # –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏
            def save_item():
                name = entries[0].get().strip().replace(" ", "_")
                desc = entries[1].get().strip()
                try:
                    flammability = float(entries[2].get())
                    explosiveness = float(entries[3].get())
                    radioactivity = float(entries[4].get())
                    charge = float(entries[5].get())
                except ValueError:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ß–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ 1!")
                    return
                
                color = entries[6].get().strip()

                if not name or not desc:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!")
                    return

                content_folder = os.path.join("mindustry_mod_creator", "mods", mod_name, "content", "items")
                os.makedirs(content_folder, exist_ok=True)

                item_data = {
                    "name": name,
                    "description": desc,
                    "flammability": flammability,
                    "explosiveness": explosiveness,
                    "radioactivity": radioactivity,
                    "charge": charge,
                    "color": color
                }

                item_file_path = os.path.join(content_folder, f"{name}.json")
                with open(item_file_path, "w", encoding="utf-8") as file:
                    json.dump(item_data, file, indent=4, ensure_ascii=False)

                # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç—É—Ä—ã
                texture_url = "https://raw.githubusercontent.com/gbvxgzbwba/texture123/main/ore/ore.png"  # –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ–∑–∂–µ
                sprite_folder = os.path.join("mindustry_mod_creator", "mods", mod_name, "sprites", "items")
                texture_path = os.path.join(sprite_folder, f"{name}.png")
                os.makedirs(sprite_folder, exist_ok=True)

                if not os.path.exists(texture_path):
                    try:
                        urllib.request.urlretrieve(texture_url, texture_path)
                        print(f"–¢–µ–∫—Å—Ç—É—Ä–∞ {name}.png –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ–∫—Å—Ç—É—Ä—ã: {e}")
                else:
                    print("–¢–µ–∫—Å—Ç—É—Ä–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ü—Ä–µ–¥–º–µ—Ç '{name}' —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
                —Å–æ–∑–¥–∞–Ω–∏–µ_–∫–Ω–æ–ø–∫–∏()

            # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            ctk.CTkButton(root, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç", font=("Arial", 12),
                    command=save_item).pack(pady=20)
            ctk.CTkButton(root, text="–ù–∞–∑–∞–¥", font=("Arial", 12),
                    command=lambda:—Å–æ–∑–¥–∞–Ω–∏–µ_–∫–Ω–æ–ø–∫–∏()).pack(pady=20)
            
        def create_liquid_window():            
            clear_window()

            ctk.CTkLabel(root, text="–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∂–∏–¥–∫–æ—Å—Ç–∏", font=("Arial", 16, "bold")).pack(pady=10)

            form_frame = ctk.CTkFrame(root)
            form_frame.pack(pady=10)

            fields = [
                ("–ù–∞–∑–≤–∞–Ω–∏–µ –∂–∏–¥–∫–æ—Å—Ç–∏", 150),
                ("–û–ø–∏—Å–∞–Ω–∏–µ", 150),
                ("–ì—É—Å—Ç–æ—Ç–∞ (0-1)", 150),
                ("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (0-1)", 150),
                ("–í–æ—Å–ø–ª–∞–º–µ–Ω—è–µ–º–æ—Å—Ç—å (0-1)", 150),
                ("–í–∑—Ä—ã–≤–æ–æ–ø–∞—Å–Ω–æ—Å—Ç—å (0-1)", 150),
                ("–¶–≤–µ—Ç (#rrggbb)", 150)
            ]

            entries = []

            for i, (label_text, width) in enumerate(fields):
                label = ctk.CTkLabel(form_frame, text=label_text)
                entry = ctk.CTkEntry(form_frame, width=width)
                label.grid(row=i, column=0, sticky="w", pady=5, padx=10)
                entry.grid(row=i, column=1, pady=5, padx=10)
                entries.append(entry)

            def save_liquid():
                name = entries[0].get().strip().replace(" ", "_")
                desc = entries[1].get().strip()

                try:
                    viscosity = float(entries[2].get())
                    temperature = float(entries[3].get())
                    flammability = float(entries[4].get())
                    explosiveness = float(entries[5].get())
                except ValueError:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!")
                    return

                color = entries[6].get().strip()

                if not name or not desc or not color:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!")
                    return

                content_folder = os.path.join("mindustry_mod_creator", "mods", mod_name, "content", "liquids")
                os.makedirs(content_folder, exist_ok=True)

                liquid_data = {
                    "name": name,
                    "description": desc,
                    "viscosity": viscosity,
                    "temperature": temperature,
                    "flammability": flammability,
                    "explosiveness": explosiveness,
                    "color": color
                }

                liquid_file_path = os.path.join(content_folder, f"{name}.json")
                with open(liquid_file_path, "w", encoding="utf-8") as file:
                    json.dump(liquid_data, file, indent=4, ensure_ascii=False)
                
                # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç—É—Ä—ã
                texture_url = "https://raw.githubusercontent.com/Anuken/Mindustry/master/core/assets-raw/sprites/items/liquid-water.png"  # –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ–∑–∂–µ
                sprite_folder = os.path.join("mindustry_mod_creator", "mods", mod_name, "sprites", "liquids")
                texture_path = os.path.join(sprite_folder, f"{name}.png")
                os.makedirs(sprite_folder, exist_ok=True)

                if not os.path.exists(texture_path):
                    try:
                        urllib.request.urlretrieve(texture_url, texture_path)
                        print(f"–¢–µ–∫—Å—Ç—É—Ä–∞ {name}.png –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ–∫—Å—Ç—É—Ä—ã: {e}")
                else:
                    print("–¢–µ–∫—Å—Ç—É—Ä–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ñ–∏–¥–∫–æ—Å—Ç—å '{name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
                —Å–æ–∑–¥–∞–Ω–∏–µ_–∫–Ω–æ–ø–∫–∏()

            # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            ctk.CTkButton(root, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∂–∏–¥–∫–æ—Å—Ç—å", font=("Arial", 12),
                    command=save_liquid).pack(pady=20)
            ctk.CTkButton(root, text="–ù–∞–∑–∞–¥", font=("Arial", 12),
                    command=lambda:—Å–æ–∑–¥–∞–Ω–∏–µ_–∫–Ω–æ–ø–∫–∏()).pack(pady=20)

        def name_exists_in_content(mod_folder, name, new_type):
            content_path = os.path.join(mod_folder, "content", "blocks")

            if not os.path.exists(content_path):
                return False  # –ù–∏—á–µ–≥–æ –Ω–µ—Ç ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º

            for block_type in os.listdir(content_path):
                type_folder = os.path.join(content_path, block_type)
                if not os.path.isdir(type_folder):
                    continue

                for file_name in os.listdir(type_folder):
                    base_name, ext = os.path.splitext(file_name)
                    if base_name == name:
                        if block_type == new_type:
                            result = messagebox.askquestion(
                                "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                                f"–ë–ª–æ–∫ —Å –∏–º–µ–Ω–µ–º '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∏–ø–µ '{new_type}'.\n–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏ –æ–±–Ω–æ–≤–∏—Ç—å –±–ª–æ–∫?",
                                icon='warning'
                            )
                            if result == "no":
                                return True  # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º
                            else:
                                return False  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º
                        else:
                            messagebox.showerror(
                                "–û—à–∏–±–∫–∞",
                                f"–ò–º—è '{name}' —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç–∏–ø–µ '{block_type}', –∞ –≤—ã —Å–æ–∑–¥–∞—ë—Ç–µ '{new_type}'."
                            )
                            return True
            return False

        def create_block(mod_name):
            global mod_folder
            mod_folder = os.path.join("mindustry_mod_creator", "mods", f"{mod_name}")
            icons_dir = os.path.join("mindustry_mod_creator", "icons") 
            os.makedirs(icons_dir, exist_ok=True)
            icons_folder = os.path.join("mindustry_mod_creator", "icons")

            def load_all_icons(parent_window=None):
                # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
                download_configs = [
                    (
                        "https://raw.githubusercontent.com/Anuken/Mindustry/master/core/assets-raw/sprites/items/",
                        ["copper", "lead", "metaglass", "graphite", "sand", "coal",
                        "titanium", "thorium", "scrap", "silicon", "plastanium",
                        "phase-fabric", "surge-alloy", "spore-pod", "blast-compound", "pyratite",
                        "water", "oil", "slag", "cryofluid"],
                        True
                    ),
                    (
                        "https://raw.githubusercontent.com/Anuken/Mindustry/master/core/assets-raw/sprites/blocks/",
                        {
                            "copper-wall": {"layers": [["walls/copper-wall.png", 1]]},
                            "copper-wall-large": {"layers": [["walls/copper-wall-large.png", 1]]},
                            "titanium-wall": {"layers": [["walls/titanium-wall.png", 1]]},
                            "titanium-wall-large": {"layers": [["walls/titanium-wall-large.png", 1]]},
                            "plastanium-wall": {"layers": [["walls/plastanium-wall.png", 1]]},
                            "plastanium-wall-large": {"layers": [["walls/plastanium-wall-large.png", 1]]},
                            "thorium-wall": {"layers": [["walls/thorium-wall.png", 1]]},
                            "thorium-wall-large": {"layers": [["walls/thorium-wall-large.png", 1]]},
                            "surge-wall": {"layers": [["walls/surge-wall.png", 1]]},
                            "surge-wall-large": {"layers": [["walls/surge-wall-large.png", 1]]},
                            "phase-wall": {"layers": [["walls/phase-wall.png", 1]]},
                            "phase-wall-large": {"layers": [["walls/phase-wall-large.png", 1]]},

                            "liquid-router": {"layers": [ ["liquid/liquid-router.png", 2],["liquid/liquid-router-bottom.png", 1]]},
                            "bridge-conduit": {"layers": [["liquid/bridge-conduit.png", 1]]},
                            "phase-conduit": {"layers": [["liquid/phase-conduit.png", 1]]},
                            "conduit": {"layers": [["liquid/conduits/conduit-top-0.png", 2],["liquid/conduits/conduit-bottom.png", 1]]},
                            "pulse-conduit": {"layers": [["liquid/conduits/pulse-conduit-top-0.png", 2],["liquid/conduits/conduit-bottom.png", 1]]},
                            "liquid-junction": {"layers": [["liquid/liquid-junction.png", 1]]},
                            "liquid-container": {"layers": [["liquid/liquid-container.png", 2],["liquid/liquid-container-bottom.png", 1]]},
                            "liquid-tank": {"layers": [["liquid/liquid-tank.png", 2],["liquid/liquid-tank-bottom.png", 1]]},
                            "mechanical-pump": {"layers": [["liquid/mechanical-pump.png", 1]]},
                            "rotary-pump": {"layers": [["liquid/rotary-pump.png", 1]]},
                            "impulse-pump": {"layers": [["liquid/impulse-pump.png", 1]]},
                            "water-extractor": {"layers": [["drills/water-extractor.png", 1],["drills/water-extractor-rotator.png", 2],["drills/water-extractor-top.png", 3]]},

                            "container": {"layers": [["storage/container.png", 1],["storage/container-team.png", 2]]},
                            "vault": {"layers": [["storage/vault.png", 1],["storage/vault-team.png", 2]]},
                            "unloader": {"layers": [["storage/unloader.png", 1]]},

                            "thermal-generator": {"layers": [["power/thermal-generator.png", 1]]},
                            "battery": {"layers": [["power/battery.png", 1]]},
                            "battery-large": {"layers": [["power/battery-large.png", 1]]},
                            "steam-generator": {"layers": [["power/steam-generator.png", 1]]},
                            "rtg-generator": {"layers": [["power/rtg-generator.png", 1]]},
                            "solar-panel": {"layers": [["power/solar-panel.png", 1]]},
                            "solar-panel-large": {"layers": [["power/solar-panel-large.png", 1]]},
                            "power-node": {"layers": [["power/power-node.png", 1]]},
                            "power-node-large": {"layers": [["power/power-node-large.png", 1]]},
                            "beam-node": {"layers": [["power/beam-node.png", 1]]},
                            "combustion-generator": {"layers": [["power/combustion-generator.png", 1]]},
                            "differential-generator": {"layers": [["power/differential-generator.png", 1]]},

                            "router": {"layers": [["distribution/router.png", 1]]},
                            "bridge-conveyor": {"layers": [["distribution/bridge-conveyor.png", 1]]},
                            "phase-conveyor": {"layers": [["distribution/phase-conveyor.png", 1]]},
                            "distributor": {"layers": [["distribution/distributor.png", 1]]},
                            "junction": {"layers": [["distribution/junction.png", 1]]},
                            "titanium-conveyor": {"layers": [["distribution/conveyors/titanium-conveyor-0-0.png", 1]]},
                            "conveyor": {"layers": [["distribution/conveyors/conveyor-0-0.png", 1]]},

                            "silicon-smelter": {"layers": [["production/silicon-smelter.png", 1]]},
                            "graphite-press": {"layers": [["production/graphite-press.png", 1]]},
                            "pyratite-mixer": {"layers": [["production/pyratite-mixer.png", 1]]},
                            "blast-mixer": {"layers": [["production/blast-mixer.png", 1]]},
                            "kiln": {"layers": [["production/kiln.png", 1]]},
                            "spore-press": {"layers": [["production/spore-press.png", 2],["production/spore-press-bottom.png", 1],["production/spore-press-piston-icon.png", 3]]},
                            "coal-centrifuge": {"layers": [["production/coal-centrifuge.png", 1]]},
                            "multi-press": {"layers": [["production/multi-press.png", 1]]},
                            "silicon-crucible": {"layers": [["production/silicon-crucible.png", 1]]},
                            "plastanium-compressor": {"layers": [["production/plastanium-compressor.png", 1]]},
                            "phase-weaver": {"layers": [["production/phase-weaver.png", 2],["production/phase-weaver-bottom.png", 1],["production/phase-weaver-weave.png", 3]]},
                            "melter": {"layers": [["production/melter.png", 1]]},
                            "surge-smelter": {"layers": [["production/surge-smelter.png", 1]]},
                            "separator": {"layers": [["production/separator.png", 2],["production/separator-bottom.png", 1],["production/separator-spinner.png", 3]]},
                            "cryofluid-mixer": {"layers": [["production/cryofluid-mixer.png", 1]]},
                            "disassembler": {"layers": [["production/disassembler.png", 2],["production/disassembler-bottom.png", 1],["production/disassembler-spinner.png", 3]]},
                            "pulverizer": {"layers": [["production/pulverizer.png", 1],["production/pulverizer-top.png", 2],["production/pulverizer-rotator.png", 3]]}
                        },
                        False
                    )
                ]

                # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∏–∫–æ–Ω–æ–∫, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
                os.makedirs(icons_folder, exist_ok=True)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
                existing_files = set(os.listdir(icons_folder)) if os.path.exists(icons_folder) else set()

                # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∫–æ–Ω–æ–∫ (—Ç–æ–ª—å–∫–æ —Ç–µ—Ö, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç)
                total_icons = 0
                download_tasks = []
                merge_tasks = []  # –ó–∞–¥–∞—á–∏ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Å–ª–æ–µ–≤

                for base_url, name_icons, is_item in download_configs:
                    if isinstance(name_icons, dict):
                        for name, config in name_icons.items():
                            final_path = os.path.join(icons_folder, f"{name}.png")
                            
                            # –ï—Å–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                            if f"{name}.png" in existing_files:
                                continue
                            
                            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ—è –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –∑–∞–≥—Ä—É–∑–∫–∏
                            temp_files = []
                            for i, (layer_path, layer_num) in enumerate(config["layers"]):
                                temp_filename = f"{name}_temp_layer_{layer_num}.png"
                                temp_path = os.path.join(icons_folder, temp_filename)
                                total_icons += 1
                                download_tasks.append((base_url + layer_path, temp_path, name, layer_num))
                                temp_files.append((temp_path, layer_num))
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
                            merge_tasks.append((name, temp_files, final_path))
                                
                    else:
                        for name in name_icons:
                            if f"{name}.png" not in existing_files:
                                filename = f"liquid-{name}.png" if name in ["water", "oil", "slag", "cryofluid"] else f"item-{name}.png" if is_item else f"{name}.png"
                                total_icons += 1
                                download_tasks.append((base_url + filename, os.path.join(icons_folder, f"{name}.png"), name, 1))

                if total_icons == 0:
                    return True

                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–∫–Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                if parent_window:
                    progress_window = ctk.CTkToplevel(parent_window)
                    progress_window.title("–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∫–æ–Ω–æ–∫")
                    progress_window.geometry("400x150")
                    progress_window.transient(parent_window)
                    progress_window.grab_set()
                    
                    progress_label = ctk.CTkLabel(progress_window, text=f"–ó–∞–≥—Ä—É–∑–∫–∞ {total_icons} –∏–∫–æ–Ω–æ–∫...")
                    progress_label.pack(pady=10)
                    
                    progress_bar = ctk.CTkProgressBar(progress_window, width=300)
                    progress_bar.pack(pady=10)
                    progress_bar.set(0)
                    
                    status_label = ctk.CTkLabel(progress_window, text="0/0")
                    status_label.pack(pady=5)
                    
                    progress_window.update()

                downloaded = 0
                errors = []

                def update_progress(current, total, name, layer_num, stage="download"):
                    if parent_window:
                        progress = (current + 1) / total
                        progress_bar.set(progress)
                        if stage == "download":
                            status_label.configure(text=f"{current + 1}/{total} - {name} (—Å–ª–æ–π {layer_num})")
                            progress_label.configure(text=f"–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è: {name} - —Å–ª–æ–π {layer_num}")
                        else:
                            status_label.configure(text=f"{current + 1}/{total} - {name} (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ)")
                            progress_label.configure(text=f"–û–±—ä–µ–¥–∏–Ω—è–µ—Ç—Å—è: {name}")
                        progress_window.update()

                def download_file(url, save_path, name, layer_num):
                    try:
                        urllib.request.urlretrieve(url, save_path)
                        return True, (name, layer_num)
                    except Exception as e:
                        return False, (name, layer_num, str(e))

                def merge_layers(name, temp_files, final_path):
                    try:
                        from PIL import Image
                        
                        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–∏ –ø–æ –Ω–æ–º–µ—Ä—É (1 - –Ω–∏–∑, 2 - –≤–µ—Ä—Ö, 3 - —Å–∞–º—ã–π –≤–µ—Ä—Ö)
                        temp_files.sort(key=lambda x: x[1])
                        
                        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–ª–æ–π –∫–∞–∫ –æ—Å–Ω–æ–≤—É
                        base_image = Image.open(temp_files[0][0]).convert("RGBA")
                        
                        # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª–æ–∏ –ø–æ–≤–µ—Ä—Ö
                        for temp_path, layer_num in temp_files[1:]:
                            layer_image = Image.open(temp_path).convert("RGBA")
                            base_image = Image.alpha_composite(base_image, layer_image)
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        base_image.save(final_path, "PNG")
                        
                        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                        for temp_path, _ in temp_files:
                            os.remove(temp_path)
                            
                        return True, name
                    except Exception as e:
                        return False, (name, str(e))

                try:
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å–ª–æ–∏
                    with ThreadPoolExecutor(max_workers=4) as executor:
                        futures = {executor.submit(download_file, url, path, name, layer): (url, path, name, layer) for url, path, name, layer in download_tasks}
                        
                        for future in as_completed(futures):
                            url, path, name, layer = futures[future]
                            success, result = future.result()
                            
                            if success:
                                downloaded += 1
                                if parent_window:
                                    update_progress(downloaded, total_icons, name, layer, "download")
                            else:
                                name, layer, error = result
                                errors.append((name, layer, error))
                                downloaded += 1
                                if parent_window:
                                    progress_label.configure(text=f"–û—à–∏–±–∫–∞: {name} (—Å–ª–æ–π {layer})")

                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ª–æ–∏
                    if merge_tasks:
                        total_merge = len(merge_tasks)
                        for i, (name, temp_files, final_path) in enumerate(merge_tasks):
                            if parent_window:
                                update_progress(i, total_merge, name, 0, "merge")
                            
                            success, result = merge_layers(name, temp_files, final_path)
                            if not success:
                                errors.append((name, "merge", result[1]))

                    # –í—ã–≤–æ–¥ –æ—à–∏–±–æ–∫, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                    if errors:
                        error_msg = "\n".join(f"{name} ({'—Å–ª–æ–π ' + str(layer) if isinstance(layer, int) else layer}): {error}" for name, layer, error in errors)
                        if parent_window:
                            messagebox.showwarning("–û—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∫–æ–Ω–∫–∏:\n{error_msg}")
                        else:
                            print(f"–û—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏:\n{error_msg}")

                    if parent_window:
                        progress_label.configure(text="–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                        progress_window.after(2000, progress_window.destroy)
                        
                    return True
                    
                except Exception as e:
                    error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
                    if parent_window:
                        progress_label.configure(text=error_msg)
                        messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)
                    else:
                        print(error_msg)
                    return False
            load_all_icons(root)
            def load_image(icon_name, size=(64, 64)):
                """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
                try:
                    img_path = os.path.join(icons_dir, icon_name)
                    if os.path.exists(img_path):
                        img = Image.open(img_path)
                        return ctk.CTkImage(light_image=img, size=size)
                    
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∏–º—è (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
                    if icon_name.endswith(".png"):
                        base_name = icon_name[:-4]
                        alternatives = [
                            f"item-{base_name}.png",
                            f"liquid-{base_name}.png",
                            f"{base_name}.png"
                        ]
                        
                        for alt in alternatives:
                            alt_path = os.path.join(icons_dir, alt)
                            if os.path.exists(alt_path):
                                img = Image.open(alt_path)
                                return ctk.CTkImage(light_image=img, size=size)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {icon_name}: {e}")
                return None

            clear_window()
            root.configure(fg_color="#3F3D3D")

            main_frame = ctk.CTkFrame(root, fg_color="transparent")
            main_frame.pack(fill="both", expand=True, padx=5, pady=5)

            left_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
            left_frame.pack(side="left", fill="both", expand=True, padx=(0, 5))

            right_frame = ctk.CTkFrame(main_frame, width=150, fg_color="transparent")
            right_frame.pack(side="right", fill="y")

            back_btn = ctk.CTkButton(right_frame, text="–ù–∞–∑–∞–¥", height=60,
                                    font=("Arial", 14), command=lambda: —Å–æ–∑–¥–∞–Ω–∏–µ_–∫–Ω–æ–ø–∫–∏())
            back_btn.pack(fill="x", pady=(0, 10))

            #///////
            canvas = ctk.CTkCanvas(left_frame, bg="#2b2b2b", highlightthickness=0)
            scrollbar = ctk.CTkScrollbar(left_frame, orientation="vertical", command=canvas.yview)
            canvas.configure(yscrollcommand=scrollbar.set)

            scrollbar.pack(side="right", fill="y")
            canvas.pack(side="left", fill="both", expand=True)

            scrollable_frame = ctk.CTkFrame(canvas, fg_color="#2b2b2b")
            window_id = canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")

            def resize_canvas(event):
                canvas_width = event.width
                canvas.itemconfig(window_id, width=canvas_width)

            scrollable_frame.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))
            canvas.bind("<Configure>", resize_canvas)

            blocks = [
                ("–°—Ç–µ–Ω–∞", "copper-wall.png", lambda: cb_creator_b("wall")),
                ("–ö–æ–Ω–≤–µ–π–µ—Ä", "titanium-conveyor.png", lambda: cb_creator_b("conveyor")),
                ("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä", "steam-generator.png", lambda: cb_creator_b("ConsumeGenerator")),
                ("–°–æ–ª–Ω. –ø–∞–Ω–µ–ª—å", "solar-panel.png", lambda: cb_creator_b("SolarGenerator")),
                ("–•—Ä–∞–Ω–∏–ª–∏—â–µ", "container.png", lambda: cb_creator_b("StorageBlock")),
                ("–ó–∞–≤–æ–¥", "silicon-smelter.png", lambda: cb_creator_b("GenericCrafter")),
                ("–¢—Ä—É–±–∞", "conduit.png", lambda: cb_creator_b("conduit")),
                ("–≠–Ω–µ—Ä–≥–æ—É–∑–µ–ª", "power-node.png", lambda: cb_creator_b("PowerNode")),
                ("–†–æ—É—Ç–µ—Ä", "router.png", lambda: cb_creator_b("router")),
                ("–ü–µ—Ä–µ–∫—Ä—ë—Å—Ç–æ–∫", "junction.png", lambda: cb_creator_b("Junction")),
                ("–†–∞–∑–≥—Ä—É—à–∏–∫", "unloader.png", lambda: cb_creator_b("Unloader")),
                ("–†–æ—É—Ç–µ—Ä –∂–∏–¥–∫–æ—Å—Ç–∏", "liquid-router.png", lambda: cb_creator_b("liquid_router")),
                ("–ü–µ—Ä–µ–∫—Ä—ë—Å—Ç–æ–∫ –∂–∏–¥–∫–æ—Å—Ç–∏", "liquid-junction.png", lambda: cb_creator_b("LiquidJunction")),
                ("–ë–∞—Ç–∞—Ä–µ–π–∫–∞", "battery.png", lambda: cb_creator_b("Battery")),
                ("–¢–µ—Ä–º–∞–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä", "thermal-generator.png", lambda: cb_creator_b("ThermalGenerator")),
                ("–ñ–∏–¥–∫–æ—Å—Ç–Ω—ã–π –±–∞–∫", "liquid-container.png", lambda: cb_creator_b("Liquid_Tank")),
                ("–õ—É—á–µ–≤–æ–π —É–∑–µ–ª", "beam-node.png", lambda: cb_creator_b("BeamNode")),
                ("–ü–æ–º–ø–∞", "rotary-pump.png", lambda: cb_creator_b("Pump")),
                ("–ù–∞–∑–µ–º–Ω–∞—è –ø–æ–º–ø–∞", "water-extractor.png", lambda: cb_creator_b("SolidPump"))
            ]

            blocks_container = ctk.CTkFrame(scrollable_frame, fg_color="transparent")
            blocks_container.pack(fill="both", expand=True, pady=10)

            def create_block_button(parent, text, icon_name, command):
                btn = ctk.CTkButton(
                    parent,
                    text=text,
                    width=120,
                    height=120,
                    font=("Arial", 12),
                    fg_color="#4753FF",
                    border_color="#1a0fbe",
                    hover_color="#1a0fbe",
                    corner_radius=0,
                    command=command
                )

                img = load_image(icon_name)
                if img:
                    btn.configure(image=img, compound="top")
                
                return btn

            def update_blocks_grid():
                container_width = blocks_container.winfo_width()
                if container_width < 1: return
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏
                for widget in blocks_container.winfo_children():
                    widget.destroy()
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
                btn_width = 120
                spacing = 10
                columns = max(1, container_width // (btn_width + spacing))
                
                # –°–æ–∑–¥–∞–µ–º —Ä—è–¥—ã
                for i in range(0, len(blocks), columns):
                    row_frame = ctk.CTkFrame(blocks_container, fg_color="transparent")
                    row_frame.pack(fill="x", pady=5)
                    
                    for block in blocks[i:i+columns]:
                        btn = create_block_button(
                            row_frame,
                            text=block[0],
                            icon_name=block[1],
                            command=block[2]
                        )
                        btn.pack(side="left", padx=5, expand=True)

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            update_blocks_grid()
            blocks_container.bind("<Configure>", lambda e: update_blocks_grid())

            def on_resize(event):
                update_blocks_grid()

            blocks_container.bind("<Configure>", on_resize)

            def open_requirements_editor(block_name, block_data):
                clear_window()
                
                root.configure(fg_color="#2b2b2b")
                
                main_frame = ctk.CTkFrame(root, fg_color="transparent")
                main_frame.pack(padx=10, pady=10, fill="both", expand=True)
                
                header_frame = ctk.CTkFrame(main_frame, height=90, fg_color="#3a3a3a", corner_radius=8)
                header_frame.pack(fill="x", pady=(0, 15))
                
                try:
                    block_type = block_data.get("type")
                    texture_path = os.path.join("mindustry_mod_creator", "mods", mod_name, "sprites", block_type, block_name, f"{block_name}.png")
                    if os.path.exists(texture_path):
                        img = Image.open(texture_path)
                        img = img.resize((70, 70), Image.LANCZOS)
                        ctk_img = ctk.CTkImage(light_image=img, size=(70, 70))
                        img_label = ctk.CTkLabel(header_frame, image=ctk_img, text="")
                        img_label.pack(side="left", padx=20)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                
                ctk.CTkLabel(header_frame, 
                            text=f"–†–µ–¥–∞–∫—Ç–æ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤: {block_name}, {block_type}, –º–∞–∫—Å–∏–º—É–º 70.000",
                            font=("Arial", 18, "bold")).pack(side="left", padx=10)
                
                content_frame = ctk.CTkFrame(main_frame, fg_color="#3a3a3a", corner_radius=8)
                content_frame.pack(fill="both", expand=True)
                
                def load_item_icon(item_name):
                    icon_paths = [
                        os.path.join(mod_folder, "sprites", "items", f"{item_name}.png"),
                        os.path.join("mindustry_mod_creator", "sprites", "items", f"{item_name}.png"),
                        os.path.join("mindustry_mod_creator", "icons", f"{item_name}.png")
                    ]
                    for path in icon_paths:
                        if os.path.exists(path):
                            try:
                                img = Image.open(path)
                                img = img.resize((50, 50), Image.LANCZOS)
                                return ctk.CTkImage(light_image=img, size=(50, 50))
                            except:
                                continue
                    return None
                
                # –°–ø–∏—Å–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
                default_items = [
                    "copper", "lead", "metaglass", "graphite", "sand", 
                    "coal", "titanium", "thorium", "scrap", "silicon",
                    "plastanium", "phase-fabric", "surge-alloy", "spore-pod", 
                    "blast-compound", "pyratite"
                ]
                
                mod_items = []
                mod_items_path = os.path.join(mod_folder, "content", "items")
                if os.path.exists(mod_items_path):
                    mod_items = [f.replace(".json", "") for f in os.listdir(mod_items_path) if f.endswith(".json")]

                default_item_entries = {}
                mod_item_entries = {}

                def create_item_card(parent, item, is_mod_item=False):
                    card_frame = ctk.CTkFrame(parent, 
                                            fg_color="#4a4a4a", 
                                            corner_radius=8,
                                            height=180)
                    card_frame.pack_propagate(False)
                    
                    content_frame = ctk.CTkFrame(card_frame, fg_color="transparent")
                    content_frame.pack(fill="both", expand=True, padx=10, pady=10)
                    
                    top_frame = ctk.CTkFrame(content_frame, fg_color="transparent")
                    top_frame.pack(fill="x", pady=(0, 10))
                    
                    icon = load_item_icon(item)
                    if icon:
                        ctk.CTkLabel(top_frame, image=icon, text="").pack()
                    
                    ctk.CTkLabel(top_frame, 
                                text=item.capitalize(), 
                                font=("Arial", 14),
                                anchor="center").pack()
                    
                    bottom_frame = ctk.CTkFrame(content_frame, fg_color="transparent")
                    bottom_frame.pack(fill="x", pady=(10, 0))

                    int_value = tk.IntVar(value=0)
                    str_value = tk.StringVar(value="0")
                    max_value = 70000

                    def sync_values(*args):
                        try:
                            val = str_value.get()
                            int_value.set(int(val) if val else 0)
                        except:
                            int_value.set(0)
                    
                    str_value.trace_add("write", sync_values)
                    
                    def validate_input(new_val):
                        if new_val == "":
                            return True
                        if not new_val.isdigit():
                            return False
                        if len(new_val) > 5:
                            return False
                        if int(new_val) > max_value:
                            return False
                        return True
                    
                    validation = parent.register(validate_input)
                    
                    controls_frame = ctk.CTkFrame(bottom_frame, fg_color="transparent")
                    controls_frame.pack(fill="x", pady=5)
                    
                    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ grid layout
                    controls_frame.grid_columnconfigure(0, weight=0, minsize=35)
                    controls_frame.grid_columnconfigure(1, weight=1, minsize=70)
                    controls_frame.grid_columnconfigure(2, weight=0, minsize=35)
                    
                    def update_value(change):
                        try:
                            current = str_value.get()
                            try:
                                current_num = int(current) if current else 0
                            except ValueError:
                                current_num = 0
                            new_value = max(0, min(max_value, current_num + change))
                            str_value.set(str(new_value))
                        except Exception as e:
                            str_value.set("0")

                    def start_increment(change):
                        global is_pressed
                        is_pressed = True
                        update_value(change)
                        root.after(100, lambda: repeat_increment(change))

                    def stop_increment():
                        global is_pressed
                        is_pressed = False

                    def repeat_increment(change):
                        if is_pressed:
                            update_value(change)
                            root.after(100, lambda: repeat_increment(change))

                    minus_btn = ctk.CTkButton(
                        controls_frame,
                        text="-",
                        width=35,
                        height=35,
                        font=("Arial", 16),
                        fg_color="#e62525",
                        hover_color="#701c1c",
                        border_color="#701c1c",
                        corner_radius=6,
                        anchor="center"
                    )
                    minus_btn.grid(row=0, column=0, padx=(0, 5), sticky="nsew")
                    minus_btn.bind("<ButtonPress-1>", lambda e: start_increment(-1))
                    minus_btn.bind("<ButtonRelease-1>", lambda e: stop_increment())

                    entry = ctk.CTkEntry(
                        controls_frame,
                        width=70,
                        height=35,
                        font=("Arial", 14),
                        textvariable=str_value,
                        fg_color="#BE6F24",
                        border_color="#613e11",
                        justify="center",
                        validate="key",
                        validatecommand=(validation, "%P")
                    )
                    entry.grid(row=0, column=1, padx=5, sticky="ew")

                    plus_btn = ctk.CTkButton(
                        controls_frame,
                        text="+",
                        width=35,
                        height=35,
                        font=("Arial", 16),
                        corner_radius=6,
                        anchor="center"
                    )
                    plus_btn.grid(row=0, column=2, padx=(5, 0), sticky="nsew")
                    plus_btn.bind("<ButtonPress-1>", lambda e: start_increment(1))
                    plus_btn.bind("<ButtonRelease-1>", lambda e: stop_increment())
                    
                    def handle_focus_out(event):
                        if str_value.get() == "":
                            str_value.set("0")
                    
                    entry.bind("<FocusOut>", handle_focus_out)
                    
                    if is_mod_item:
                        mod_item_entries[item] = int_value
                    else:
                        default_item_entries[item] = int_value
                    
                    return card_frame
                
                def calculate_columns(container_width):
                    min_card_width = 180
                    spacing = 10
                    max_columns = max(1, container_width // (min_card_width + spacing))
                    if max_columns * (min_card_width + spacing) - spacing <= container_width:
                        return max_columns, min_card_width
                    return 1, -1
                
                def update_grid(canvas, items_frame, items):
                    container_width = canvas.winfo_width()
                    if container_width < 1:
                        return
                    
                    columns, card_width = calculate_columns(container_width)
                    
                    for widget in items_frame.grid_slaves():
                        widget.grid_forget()
                    
                    for i, item in enumerate(items):
                        row = i // columns
                        col = i % columns
                        is_mod_item = item in mod_items
                        card = create_item_card(items_frame, item, is_mod_item)
                        if card_width == -1:
                            card.configure(width=container_width - 20)
                        else:
                            card.configure(width=card_width)
                        card.grid(row=row, column=col, padx=5, pady=5, sticky="nsew")
                    
                    items_frame.update_idletasks()
                    canvas.configure(scrollregion=canvas.bbox("all"))
                    
                    if items_frame.winfo_height() <= canvas.winfo_height():
                        canvas.yview_moveto(0)
                        scrollbar.pack_forget()
                    else:
                        scrollbar.pack(side="right", fill="y")
                
                # –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω —Å–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
                canvas = tk.Canvas(content_frame, bg="#3a3a3a", highlightthickness=0)
                scrollbar = ctk.CTkScrollbar(content_frame, orientation="vertical", command=canvas.yview)
                canvas.configure(yscrollcommand=scrollbar.set)
                
                scrollbar.pack(side="right", fill="y")
                canvas.pack(side="left", fill="both", expand=True, padx=10, pady=10)
                
                items_frame = ctk.CTkFrame(canvas, fg_color="#3a3a3a")
                canvas.create_window((0, 0), window=items_frame, anchor="nw")

                def on_mousewhell(event):
                    canvas.yview_scroll(int(-1*(event.delta/120)),"units")
                canvas.bind_all("<MouseWheel>", on_mousewhell)
                canvas.bind_all("<Button-4>", lambda e: canvas.yview_scroll(-1, "units"))
                canvas.bind_all("<Button-5>", lambda e: canvas.yview_scroll(1, "units"))
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫
                all_items = default_items + mod_items
                update_grid(canvas, items_frame, all_items)
                
                canvas.bind("<Configure>", lambda e: update_grid(canvas, items_frame, all_items))
                items_frame.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))
                
                footer_frame = ctk.CTkFrame(main_frame, height=70, fg_color="#3a3a3a", corner_radius=8)
                footer_frame.pack(fill="x", pady=(15, 0))
                
                btn_frame = ctk.CTkFrame(footer_frame, fg_color="transparent")
                btn_frame.pack(expand=True, pady=15)
                
                def save_requirements():
                    requirements = []
                    
                    for item, var in default_item_entries.items():
                        amount = var.get()
                        if amount > 0:
                            requirements.append({"item": item, "amount": amount})
                    
                    for item, var in mod_item_entries.items():
                        amount = var.get()
                        if amount > 0:
                            requirements.append({"item": item, "amount": amount})
                    
                    if not requirements:
                        messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞!")
                        return
                    
                    block_data["requirements"] = requirements
                    
                    try:
                        block_type = block_data.get("type")
                        content_folder = os.path.join("mindustry_mod_creator", "mods", mod_name, "content", "blocks", block_type)
                        os.makedirs(content_folder, exist_ok=True)
                        
                        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
                        progress_window = ctk.CTkToplevel(root)
                        progress_window.title("–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç—É—Ä")
                        progress_window.geometry("400x150")
                        progress_window.transient(root)
                        progress_window.grab_set()
                        progress_window.protocol("WM_DELETE_WINDOW", lambda: None)  # –ë–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ
                        
                        progress_label = ctk.CTkLabel(progress_window, text="–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–≥—Ä—É–∑–∫–µ...")
                        progress_label.pack(pady=10)
                        
                        progress_bar = ctk.CTkProgressBar(progress_window, width=300)
                        progress_bar.pack(pady=10)
                        progress_bar.set(0)
                        
                        status_label = ctk.CTkLabel(progress_window, text="0/0")
                        status_label.pack(pady=5)
                        
                        # –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –æ–∫–Ω–µ
                        for child in btn_frame.winfo_children():
                            child.configure(state="disabled")

                        # –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç—É—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
                        texture_names = []
                        base_url = ""

                        if block_type == "wall":
                            texture_names = ["copper-wall.png"]
                            base_url = "https://raw.githubusercontent.com/Anuken/Mindustry/master/core/assets-raw/sprites/blocks/walls/"

                        elif block_type == "Battery":
                            texture_names = ["battery.png", "battery-top.png"]
                            base_url = "https://raw.githubusercontent.com/Anuken/Mindustry/master/core/assets-raw/sprites/blocks/power/"
                        elif block_type == "conveyor":
                            texture_names = [
                                "conveyor-0-0.png", "conveyor-0-1.png", "conveyor-0-2.png", "conveyor-0-3.png",
                                "conveyor-1-0.png", "conveyor-1-1.png", "conveyor-1-2.png", "conveyor-1-3.png",
                                "conveyor-2-0.png", "conveyor-2-1.png", "conveyor-2-2.png", "conveyor-2-3.png",
                                "conveyor-3-0.png", "conveyor-3-1.png", "conveyor-3-2.png", "conveyor-3-3.png",
                                "conveyor-4-0.png", "conveyor-4-1.png", "conveyor-4-2.png", "conveyor-4-3.png"
                            ]
                            base_url = "https://raw.githubusercontent.com/Anuken/Mindustry/master/core/assets-raw/sprites/blocks/distribution/conveyors/"
                        elif block_type == "GenericCrafter":
                            texture_names = ["silicon-smelter.png"]
                            base_url = "https://raw.githubusercontent.com/Anuken/Mindustry/master/core/assets-raw/sprites/blocks/production/"
                        elif block_type == "SolarGenerator":
                            texture_names = ["solar-panel.png"]
                            base_url = "https://raw.githubusercontent.com/Anuken/Mindustry/master/core/assets-raw/sprites/blocks/power/"
                        elif block_type == "StorageBlock":
                            texture_names = ["container.png","container-team.png"]
                            base_url = "https://raw.githubusercontent.com/Anuken/Mindustry/master/core/assets-raw/sprites/blocks/storage/"
                        elif block_type == "conduit":
                            texture_names = ["conduit-top-0.png", "conduit-top-1.png", "conduit-top-2.png", "conduit-top-3.png",
                                "conduit-top-4.png", "conduit-bottom-0.png", "conduit-bottom-1.png", "conduit-bottom-2.png",
                                "conduit-bottom-3.png", "conduit-bottom-4.png", "conduit-bottom.png"
                            ]
                            base_url = "https://raw.githubusercontent.com/Anuken/Mindustry/master/core/assets-raw/sprites/blocks/liquid/conduits/"
                        elif block_type == "ConsumeGenerator":
                            texture_names = [
                                "rtg-generator.png"
                            ]
                            base_url = "https://raw.githubusercontent.com/Anuken/Mindustry/master/core/assets-raw/sprites/blocks/power/"
                        elif block_type == "PowerNode":
                            texture_names = ["power-node.png"]
                            base_url = "https://raw.githubusercontent.com/Anuken/Mindustry/master/core/assets-raw/sprites/blocks/power/"
                        elif block_type == "Router":
                            texture_names = ["router.png"]
                            base_url = "https://raw.githubusercontent.com/Anuken/Mindustry/master/core/assets-raw/sprites/blocks/distribution/"
                        elif block_type == "Junction":
                            texture_names = ["junction.png"]
                            base_url = "https://raw.githubusercontent.com/Anuken/Mindustry/master/core/assets-raw/sprites/blocks/distribution/"
                        elif block_type == "Unloader":
                            texture_names = ["unloader.png", "unloader-center.png"]
                            base_url = "https://raw.githubusercontent.com/Anuken/Mindustry/master/core/assets-raw/sprites/blocks/storage/"
                        elif block_type == "LiquidRouter":
                            texture_names = ["liquid-router.png", "liquid-router-bottom.png"]
                            base_url = "https://raw.githubusercontent.com/Anuken/Mindustry/master/core/assets-raw/sprites/blocks/liquid/"
                        elif block_type == "LiquidJunction":
                            texture_names = ["liquid-junction.png"]
                            base_url = "https://raw.githubusercontent.com/Anuken/Mindustry/master/core/assets-raw/sprites/blocks/liquid/"
                        elif block_type == "ThermalGenerator":
                            texture_names = ["thermal-generator.png"]
                            base_url = "https://raw.githubusercontent.com/Anuken/Mindustry/master/core/assets-raw/sprites/blocks/power/"
                        elif block_type == "BeamNode":
                            texture_names = ["beam-node.png"]
                            base_url = "https://raw.githubusercontent.com/Anuken/Mindustry/master/core/assets-raw/sprites/blocks/power/"
                        elif block_type == "Pump":
                            texture_names = ["rotary-pump.png"]
                            base_url = "https://raw.githubusercontent.com/Anuken/Mindustry/master/core/assets-raw/sprites/blocks/liquid/"
                        elif block_type == "SolidPump":
                            texture_names = ["water-extractor.png","water-extractor-rotator.png","water-extractor-top.png"]
                            base_url = "https://raw.githubusercontent.com/Anuken/Mindustry/master/core/assets-raw/sprites/blocks/drills/"
                        else:
                            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –±–ª–æ–∫–∞: {block_type}")

                        if len(texture_names) == 1:
                            sprite_folder = os.path.join("mindustry_mod_creator", "mods", mod_name, "sprites", block_type)
                        else:
                            sprite_folder = os.path.join("mindustry_mod_creator", "mods", mod_name, "sprites", block_type, block_name)
                        os.makedirs(sprite_folder, exist_ok=True)
                        
                        total_files = len(texture_names)
                        downloaded = 0
                        
                        def update_progress():
                            nonlocal downloaded
                            progress = downloaded / total_files
                            progress_bar.set(progress)
                            status_label.configure(text=f"{downloaded}/{total_files}")
                            progress_window.update()
                        
                        def resize_image(image_path, size_multiplier):
                            """–ò–∑–º–µ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –º–Ω–æ–∂–∏—Ç–µ–ª—é (1=32px, 2=64px, ...)"""
                            from PIL import Image
                            try:
                                original_size = 32  # –ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç—É—Ä Mindustry
                                new_size = original_size * size_multiplier
                                
                                img = Image.open(image_path)
                                if img.size != (new_size, new_size):
                                    img = img.resize((new_size, new_size), Image.Resampling.LANCZOS)
                                    img.save(image_path)
                            except Exception as e:
                                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ {image_path}: {e}")
                        
                        def download_textures():
                            nonlocal downloaded
                            try:
                                size_multiplier = int(block_data.get("size", 1))
                                size_multiplier = max(1, min(15, size_multiplier))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω 1-15
                                
                                for texture in texture_names:
                                    try:
                                        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                                        if block_type == "battery":
                                            new_name = texture.replace("battery", block_name)
                                        elif block_type == "wall":
                                            new_name = texture.replace("copper-wall", block_name)
                                        elif block_type == "conveyor":
                                            new_name = texture.replace("conveyor", block_name)
                                        elif block_type == "GenericCrafter":
                                            new_name = texture.replace("silicon-smelter", block_name)
                                        elif block_type == "SolarGenerator":
                                            new_name = texture.replace("solar-panel", block_name)
                                        elif block_type == "StorageBlock":
                                            new_name = texture.replace("container", block_name)
                                        elif block_type == "conduit":
                                            new_name = texture.replace("conduit", block_name)
                                        elif block_type == "ConsumeGenerator":
                                            new_name = texture.replace("rtg-generator", block_name)
                                        elif block_type == "PowerNode":
                                            new_name = texture.replace("power-node", block_name)
                                        elif block_type == "Router":
                                            new_name = texture.replace("router", block_name)
                                        elif block_type == "Junction":
                                            new_name = texture.replace("junction", block_name)
                                        elif block_type == "Unloader":
                                            new_name = texture.replace("unloader", block_name)
                                        elif block_type == "LiquidRouter":
                                            new_name = texture.replace("liquid-router", block_name)
                                        elif block_type == "LiquidJunction":
                                            new_name = texture.replace("liquid-junction", block_name)
                                        elif block_type == "ThermalGenerator":
                                            new_name = texture.replace("thermal-generator", block_name)
                                        elif block_type == "BeamNode":
                                            new_name = texture.replace("beam-node", block_name)
                                        elif block_type == "Pump":
                                            new_name = texture.replace("rotary-pump", block_name)
                                        elif block_type == "SolidPump":
                                            new_name = texture.replace("water-extractor", block_name)
                                        else:
                                            new_name = f"{block_name}{texture[texture.find('-'):]}" if '-' in texture else f"{block_name}.png"
                                        
                                        texture_path = os.path.join(sprite_folder, new_name)
                                        
                                        if not os.path.exists(texture_path):
                                            texture_url = f"{base_url}{texture}"
                                            urllib.request.urlretrieve(texture_url, texture_path)
                                            resize_image(texture_path, size_multiplier)
                                            progress_label.configure(text=f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {new_name}")
                                        
                                        downloaded += 1
                                        progress_window.after(100, update_progress)
                                    
                                    except Exception as e:
                                        progress_label.configure(text=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {texture}")
                                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {texture}: {str(e)}")
                                        downloaded += 1  # –í—Å–µ —Ä–∞–≤–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                                
                                progress_window.after(100, finish_saving)
                            
                            except Exception as e:
                                progress_window.after(100, lambda: error_occurred(str(e)))
                        
                        def finish_saving():
                            try:
                                block_path = os.path.join(content_folder, f"{block_name}.json")
                                with open(block_path, "w", encoding="utf-8") as f:
                                    json.dump(block_data, f, indent=4, ensure_ascii=False)
                                
                                progress_window.destroy()
                                for child in btn_frame.winfo_children():
                                    child.configure(state="normal")
                                
                                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ë–ª–æ–∫ '{block_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
                                —Å–æ–∑–¥–∞–Ω–∏–µ_–∫–Ω–æ–ø–∫–∏()
                            
                            except Exception as e:
                                error_occurred(str(e))
                        
                        def error_occurred(error_msg):
                            progress_window.destroy()
                            for child in btn_frame.winfo_children():
                                child.configure(state="normal")
                            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–ª–æ–∫: {error_msg}")
                        
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                        threading.Thread(target=download_textures, daemon=True).start()

                    except Exception as e:
                        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {str(e)}")
                        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏
                        for child in btn_frame.winfo_children():
                            child.configure(state="normal")
                
                ctk.CTkButton(btn_frame, 
                            text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", 
                            width=140, 
                            height=45,
                            font=("Arial", 14),
                            command=save_requirements).pack(side="left", padx=20)
                
                ctk.CTkButton(btn_frame, 
                            text="–û—Ç–º–µ–Ω–∞", 
                            width=140, 
                            height=45,
                            font=("Arial", 14),
                            fg_color="#e62525", 
                            hover_color="#701c1c", border_color="#701c1c",
                            command=—Å–æ–∑–¥–∞–Ω–∏–µ_–∫–Ω–æ–ø–∫–∏).pack(side="left", padx=20)

            def open_item_GenericCrafter_editor(block_name, block_data):
                clear_window()
                root.configure(fg_color="#2b2b2b")
                
                main_frame = ctk.CTkFrame(root, fg_color="transparent")
                main_frame.pack(padx=10, pady=10, fill="both", expand=True)
                
                header_frame = ctk.CTkFrame(main_frame, height=90, fg_color="#3a3a3a", corner_radius=8)
                header_frame.pack(fill="x", pady=(0, 15))
                
                try:
                    block_type = block_data.get("type")
                    texture_path = os.path.join("mindustry_mod_creator", "mods", mod_name, "sprites", block_type, block_name, f"{block_name}.png")
                    if os.path.exists(texture_path):
                        img = Image.open(texture_path)
                        img = img.resize((70, 70), Image.LANCZOS)
                        ctk_img = ctk.CTkImage(light_image=img, size=(70, 70))
                        img_label = ctk.CTkLabel(header_frame, image=ctk_img, text="")
                        img_label.pack(side="left", padx=20)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                
                ctk.CTkLabel(header_frame, 
                            text=f"–†–µ–¥–∞–∫—Ç–æ—Ä –ø–æ—Ç—Ä–µ–±–ª—è–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {block_name}",
                            font=("Arial", 18, "bold")).pack(side="left", padx=10)
                
                content_frame = ctk.CTkFrame(main_frame, fg_color="#3a3a3a", corner_radius=8)
                content_frame.pack(fill="both", expand=True)
                
                def load_item_icon(item_name):
                    icon_paths = [
                        os.path.join(mod_folder, "sprites", "items", f"{item_name}.png"),
                        os.path.join("mindustry_mod_creator", "sprites", "items", f"{item_name}.png"),
                        os.path.join("mindustry_mod_creator", "icons", f"{item_name}.png")
                    ]
                    for path in icon_paths:
                        if os.path.exists(path):
                            try:
                                img = Image.open(path)
                                img = img.resize((50, 50), Image.LANCZOS)
                                return ctk.CTkImage(light_image=img, size=(50, 50))
                            except:
                                continue
                    return None
                
                # –°–ø–∏—Å–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
                default_items = [
                    "copper", "lead", "metaglass", "graphite", "sand", 
                    "coal", "titanium", "thorium", "scrap", "silicon",
                    "plastanium", "phase-fabric", "surge-alloy", "spore-pod", 
                    "blast-compound", "pyratite"
                ]
                
                mod_items = []
                mod_items_path = os.path.join(mod_folder, "content", "items")
                if os.path.exists(mod_items_path):
                    mod_items = [f.replace(".json", "") for f in os.listdir(mod_items_path) if f.endswith(".json")]

                default_item_entries = {}
                mod_item_entries = {}

                def create_item_card(parent, item, is_mod_item=False):
                    card_frame = ctk.CTkFrame(parent, 
                                            fg_color="#4a4a4a", 
                                            corner_radius=8,
                                            height=180)
                    card_frame.pack_propagate(False)
                    
                    content_frame = ctk.CTkFrame(card_frame, fg_color="transparent")
                    content_frame.pack(fill="both", expand=True, padx=10, pady=10)
                    
                    top_frame = ctk.CTkFrame(content_frame, fg_color="transparent")
                    top_frame.pack(fill="x", pady=(0, 10))
                    
                    icon = load_item_icon(item)
                    if icon:
                        ctk.CTkLabel(top_frame, image=icon, text="").pack()
                    
                    ctk.CTkLabel(top_frame, 
                                text=item.capitalize(), 
                                font=("Arial", 14),
                                anchor="center").pack()
                    
                    bottom_frame = ctk.CTkFrame(content_frame, fg_color="transparent")
                    bottom_frame.pack(fill="x", pady=(10, 0))

                    int_value = tk.IntVar(value=0)
                    str_value = tk.StringVar(value="0")
                    max_value = 50

                    def sync_values(*args):
                        try:
                            val = str_value.get()
                            int_value.set(int(val) if val else 0)
                        except:
                            int_value.set(0)
                    
                    str_value.trace_add("write", sync_values)
                    
                    def validate_input(new_val):
                        if new_val == "":
                            return True
                        if not new_val.isdigit():
                            return False
                        if len(new_val) > 2:
                            return False
                        if int(new_val) > max_value:
                            return False
                        return True
                    
                    validation = parent.register(validate_input)
                    
                    controls_frame = ctk.CTkFrame(bottom_frame, fg_color="transparent")
                    controls_frame.pack(fill="x", pady=5)
                    
                    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ grid layout
                    controls_frame.grid_columnconfigure(0, weight=0, minsize=35)
                    controls_frame.grid_columnconfigure(1, weight=1, minsize=70)
                    controls_frame.grid_columnconfigure(2, weight=0, minsize=35)
                    
                    def update_value(change):
                        try:
                            current = str_value.get()
                            try:
                                current_num = int(current) if current else 0
                            except ValueError:
                                current_num = 0
                            new_value = max(0, min(max_value, current_num + change))
                            str_value.set(str(new_value))
                        except Exception as e:
                            str_value.set("0")

                    def start_increment(change):
                        global is_pressed
                        is_pressed = True
                        update_value(change)
                        root.after(100, lambda: repeat_increment(change))

                    def stop_increment():
                        global is_pressed
                        is_pressed = False

                    def repeat_increment(change):
                        if is_pressed:
                            update_value(change)
                            root.after(100, lambda: repeat_increment(change))

                    minus_btn = ctk.CTkButton(
                        controls_frame,
                        text="-",
                        width=35,
                        height=35,
                        font=("Arial", 16),
                        fg_color="#e62525",
                        hover_color="#701c1c",
                        border_color="#701c1c",
                        corner_radius=6,
                        anchor="center"
                    )
                    minus_btn.grid(row=0, column=0, padx=(0, 5), sticky="nsew")
                    minus_btn.bind("<ButtonPress-1>", lambda e: start_increment(-1))
                    minus_btn.bind("<ButtonRelease-1>", lambda e: stop_increment())

                    entry = ctk.CTkEntry(
                        controls_frame,
                        width=70,
                        height=35,
                        font=("Arial", 14),
                        textvariable=str_value,
                        fg_color="#BE6F24",
                        border_color="#613e11",
                        justify="center",
                        validate="key",
                        validatecommand=(validation, "%P")
                    )
                    entry.grid(row=0, column=1, padx=5, sticky="ew")

                    plus_btn = ctk.CTkButton(
                        controls_frame,
                        text="+",
                        width=35,
                        height=35,
                        font=("Arial", 16),
                        corner_radius=6,
                        anchor="center"
                    )
                    plus_btn.grid(row=0, column=2, padx=(5, 0), sticky="nsew")
                    plus_btn.bind("<ButtonPress-1>", lambda e: start_increment(1))
                    plus_btn.bind("<ButtonRelease-1>", lambda e: stop_increment())
                    
                    def handle_focus_out(event):
                        if str_value.get() == "":
                            str_value.set("0")
                    
                    entry.bind("<FocusOut>", handle_focus_out)
                    
                    if is_mod_item:
                        mod_item_entries[item] = int_value
                    else:
                        default_item_entries[item] = int_value
                    
                    return card_frame
                
                def calculate_columns(container_width):
                    min_card_width = 180
                    spacing = 10
                    max_columns = max(1, container_width // (min_card_width + spacing))
                    if max_columns * (min_card_width + spacing) - spacing <= container_width:
                        return max_columns, min_card_width
                    return 1, -1
                
                def update_grid(canvas, items_frame, items):
                    container_width = canvas.winfo_width()
                    if container_width < 1:
                        return
                    
                    columns, card_width = calculate_columns(container_width)
                    
                    for widget in items_frame.grid_slaves():
                        widget.grid_forget()
                    
                    for i, item in enumerate(items):
                        row = i // columns
                        col = i % columns
                        is_mod_item = item in mod_items
                        card = create_item_card(items_frame, item, is_mod_item)
                        if card_width == -1:
                            card.configure(width=container_width - 20)
                        else:
                            card.configure(width=card_width)
                        card.grid(row=row, column=col, padx=5, pady=5, sticky="nsew")
                    
                    items_frame.update_idletasks()
                    canvas.configure(scrollregion=canvas.bbox("all"))
                    
                    if items_frame.winfo_height() <= canvas.winfo_height():
                        canvas.yview_moveto(0)
                        scrollbar.pack_forget()
                    else:
                        scrollbar.pack(side="right", fill="y")
                
                # –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω —Å–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
                canvas = tk.Canvas(content_frame, bg="#3a3a3a", highlightthickness=0)
                scrollbar = ctk.CTkScrollbar(content_frame, orientation="vertical", command=canvas.yview)
                canvas.configure(yscrollcommand=scrollbar.set)
                
                scrollbar.pack(side="right", fill="y")
                canvas.pack(side="left", fill="both", expand=True, padx=10, pady=10)
                
                items_frame = ctk.CTkFrame(canvas, fg_color="#3a3a3a")
                canvas.create_window((0, 0), window=items_frame, anchor="nw")

                def on_mousewhell(event):
                    canvas.yview_scroll(int(-1*(event.delta/120)),"units")
                canvas.bind_all("<MouseWheel>", on_mousewhell)
                canvas.bind_all("<Button-4>", lambda e: canvas.yview_scroll(-1, "units"))
                canvas.bind_all("<Button-5>", lambda e: canvas.yview_scroll(1, "units"))
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫
                all_items = default_items + mod_items
                update_grid(canvas, items_frame, all_items)
                
                canvas.bind("<Configure>", lambda e: update_grid(canvas, items_frame, all_items))
                items_frame.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))
                
                footer_frame = ctk.CTkFrame(main_frame, height=70, fg_color="#3a3a3a", corner_radius=8)
                footer_frame.pack(fill="x", pady=(15, 0))
                
                btn_frame = ctk.CTkFrame(footer_frame, fg_color="transparent")
                btn_frame.pack(expand=True, pady=15)

                def save_requirements():
                    consumes_items = []
                    
                    for item, var in default_item_entries.items():
                        amount = var.get()
                        if amount > 0:
                            consumes_items.append({"item": item, "amount": amount})
                    
                    for item, var in mod_item_entries.items():
                        amount = var.get()
                        if amount > 0:
                            consumes_items.append({"item": item, "amount": amount})
                    
                    if not consumes_items:
                        messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞!")
                        return
                    
                    block_data["consumes"]["items"] = consumes_items
                    
                    try:
                        block_type = block_data.get("type")
                        content_folder = os.path.join("mindustry_mod_creator", "mods", mod_name, "content", "blocks", block_type)
                        os.makedirs(content_folder, exist_ok=True)
                        
                        block_path = os.path.join(content_folder, f"{block_name}.json")
                        with open(block_path, "w", encoding="utf-8") as f:
                            json.dump(block_data, f, indent=4, ensure_ascii=False)
                        
                        messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ü–æ—Ç—Ä–µ–±–ª—è–µ–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –±–ª–æ–∫–∞ '{block_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
                        open_liquid_GenericCrafter_editor(block_name, block_data)
                    
                    except Exception as e:
                        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã: {str(e)}")
                
                def skip_items():
                    open_liquid_GenericCrafter_editor(block_name, block_data)
                
                ctk.CTkButton(btn_frame, 
                            text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", 
                            width=140, 
                            height=45,
                            font=("Arial", 14),
                            command=save_requirements).pack(side="left", padx=20)
                
                ctk.CTkButton(btn_frame, 
                            text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", 
                            width=140, 
                            height=45,
                            font=("Arial", 14),
                            fg_color="#e62525", 
                            hover_color="#701c1c", border_color="#701c1c",
                            command=skip_items).pack(side="left", padx=20)

            def open_liquid_GenericCrafter_editor(block_name, block_data):
                clear_window()
                root.configure(fg_color="#2b2b2b")
                
                main_frame = ctk.CTkFrame(root, fg_color="transparent")
                main_frame.pack(padx=10, pady=10, fill="both", expand=True)
                
                header_frame = ctk.CTkFrame(main_frame, height=90, fg_color="#3a3a3a", corner_radius=8)
                header_frame.pack(fill="x", pady=(0, 15))
                
                try:
                    block_type = block_data.get("type")
                    texture_path = os.path.join("mindustry_mod_creator", "mods", mod_name, "sprites", block_type, block_name, f"{block_name}.png")
                    if os.path.exists(texture_path):
                        img = Image.open(texture_path)
                        img = img.resize((70, 70), Image.LANCZOS)
                        ctk_img = ctk.CTkImage(light_image=img, size=(70, 70))
                        img_label = ctk.CTkLabel(header_frame, image=ctk_img, text="")
                        img_label.pack(side="left", padx=20)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                
                ctk.CTkLabel(header_frame, 
                            text=f"–†–µ–¥–∞–∫—Ç–æ—Ä –ø–æ—Ç—Ä–µ–±–ª—è–µ–º—ã—Ö –∂–∏–¥–∫–æ—Å—Ç–µ–π: {block_name}",
                            font=("Arial", 18, "bold")).pack(side="left", padx=10)
                
                content_frame = ctk.CTkFrame(main_frame, fg_color="#3a3a3a", corner_radius=8)
                content_frame.pack(fill="both", expand=True)
                
                def load_liquid_icon(liquid_name):
                    icon_paths = [
                        os.path.join(mod_folder, "sprites", "liquids", f"{liquid_name}.png"),
                        os.path.join("mindustry_mod_creator", "sprites", "liquids", f"{liquid_name}.png"),
                        os.path.join("mindustry_mod_creator", "icons", f"{liquid_name}.png")
                    ]
                    for path in icon_paths:
                        if os.path.exists(path):
                            try:
                                img = Image.open(path)
                                img = img.resize((50, 50), Image.LANCZOS)
                                return ctk.CTkImage(light_image=img, size=(50, 50))
                            except:
                                continue
                    return None
                
                # –°–ø–∏—Å–∫–∏ –∂–∏–¥–∫–æ—Å—Ç–µ–π
                default_liquids = ["water", "slag", "oil", "cryofluid"]
                
                mod_liquids = []
                mod_liquids_path = os.path.join(mod_folder, "content", "liquids")
                if os.path.exists(mod_liquids_path):
                    mod_liquids = [f.replace(".json", "") for f in os.listdir(mod_liquids_path) if f.endswith(".json")]

                default_liquid_entries = {}
                mod_liquid_entries = {}

                def create_liquid_card(parent, liquid, is_mod_liquid=False):
                    card_frame = ctk.CTkFrame(parent, 
                                            fg_color="#4a4a4a", 
                                            corner_radius=8,
                                            height=180)
                    card_frame.pack_propagate(False)
                    
                    content_frame = ctk.CTkFrame(card_frame, fg_color="transparent")
                    content_frame.pack(fill="both", expand=True, padx=10, pady=10)
                    
                    top_frame = ctk.CTkFrame(content_frame, fg_color="transparent")
                    top_frame.pack(fill="x", pady=(0, 10))
                    
                    icon = load_liquid_icon(liquid)
                    if icon:
                        ctk.CTkLabel(top_frame, image=icon, text="").pack()
                    
                    ctk.CTkLabel(top_frame, 
                                text=liquid.capitalize(), 
                                font=("Arial", 14),
                                anchor="center").pack()
                    
                    bottom_frame = ctk.CTkFrame(content_frame, fg_color="transparent")
                    bottom_frame.pack(fill="x", pady=(10, 0))

                    float_value = tk.DoubleVar(value=0.0)
                    str_value = tk.StringVar(value="0")
                    max_value = 50.0

                    def sync_values(*args):
                        try:
                            val = str_value.get()
                            float_value.set(float(val) if val else 0.0)
                        except:
                            float_value.set(0.0)
                    
                    str_value.trace_add("write", sync_values)
                    
                    def validate_input(new_val):
                        if new_val == "":
                            return True
                        try:
                            val = float(new_val)
                            if val < 0 or val > max_value:
                                return False
                        except ValueError:
                            return False
                        return True
                    
                    validation = parent.register(validate_input)
                    
                    controls_frame = ctk.CTkFrame(bottom_frame, fg_color="transparent")
                    controls_frame.pack(fill="x", pady=5)
                    
                    controls_frame.grid_columnconfigure(0, weight=0, minsize=35)
                    controls_frame.grid_columnconfigure(1, weight=1, minsize=70)
                    controls_frame.grid_columnconfigure(2, weight=0, minsize=35)
                    
                    def update_value(change):
                        try:
                            current = str_value.get()
                            try:
                                current_num = float(current) if current else 0.0
                            except ValueError:
                                current_num = 0.0
                            new_value = max(0.0, min(max_value, current_num + change))
                            str_value.set(f"{new_value:.1f}")
                        except Exception as e:
                            str_value.set("0.0")

                    def start_increment(change):
                        global is_pressed
                        is_pressed = True
                        update_value(change)
                        root.after(100, lambda: repeat_increment(change))

                    def stop_increment():
                        global is_pressed
                        is_pressed = False

                    def repeat_increment(change):
                        if is_pressed:
                            update_value(change)
                            root.after(100, lambda: repeat_increment(change))

                    minus_btn = ctk.CTkButton(
                        controls_frame,
                        text="-",
                        width=35,
                        height=35,
                        font=("Arial", 16),
                        fg_color="#e62525",
                        hover_color="#701c1c",
                        border_color="#701c1c",
                        corner_radius=6,
                        anchor="center"
                    )
                    minus_btn.grid(row=0, column=0, padx=(0, 5), sticky="nsew")
                    minus_btn.bind("<ButtonPress-1>", lambda e: start_increment(-0.1))
                    minus_btn.bind("<ButtonRelease-1>", lambda e: stop_increment())

                    entry = ctk.CTkEntry(
                        controls_frame,
                        width=70,
                        height=35,
                        font=("Arial", 14),
                        textvariable=str_value,
                        fg_color="#3a7ebf",
                        border_color="#1f4b7a",
                        justify="center",
                        validate="key",
                        validatecommand=(validation, "%P")
                    )
                    entry.grid(row=0, column=1, padx=5, sticky="ew")

                    plus_btn = ctk.CTkButton(
                        controls_frame,
                        text="+",
                        width=35,
                        height=35,
                        font=("Arial", 16),
                        corner_radius=6,
                        anchor="center"
                    )
                    plus_btn.grid(row=0, column=2, padx=(5, 0), sticky="nsew")
                    plus_btn.bind("<ButtonPress-1>", lambda e: start_increment(0.1))
                    plus_btn.bind("<ButtonRelease-1>", lambda e: stop_increment())
                    
                    def handle_focus_out(event):
                        if str_value.get() == "":
                            str_value.set("1.0")
                    
                    entry.bind("<FocusOut>", handle_focus_out)
                    
                    if is_mod_liquid:
                        mod_liquid_entries[liquid] = float_value
                    else:
                        default_liquid_entries[liquid] = float_value
                    
                    return card_frame
                
                def calculate_columns(container_width):
                    min_card_width = 180
                    spacing = 10
                    max_columns = max(1, container_width // (min_card_width + spacing))
                    if max_columns * (min_card_width + spacing) - spacing <= container_width:
                        return max_columns, min_card_width
                    return 1, -1
                
                def update_grid(canvas, items_frame, items):
                    container_width = canvas.winfo_width()
                    if container_width < 1:
                        return
                    
                    columns, card_width = calculate_columns(container_width)
                    
                    for widget in items_frame.grid_slaves():
                        widget.grid_forget()
                    
                    for i, item in enumerate(items):
                        row = i // columns
                        col = i % columns
                        is_mod_liquid = item in mod_liquids
                        card = create_liquid_card(items_frame, item, is_mod_liquid)
                        if card_width == -1:
                            card.configure(width=container_width - 20)
                        else:
                            card.configure(width=card_width)
                        card.grid(row=row, column=col, padx=5, pady=5, sticky="nsew")
                    
                    items_frame.update_idletasks()
                    canvas.configure(scrollregion=canvas.bbox("all"))
                    
                    if items_frame.winfo_height() <= canvas.winfo_height():
                        canvas.yview_moveto(0)
                        scrollbar.pack_forget()
                    else:
                        scrollbar.pack(side="right", fill="y")
                
                # –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω —Å–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—Å–µ—Ö –∂–∏–¥–∫–æ—Å—Ç–µ–π
                canvas = tk.Canvas(content_frame, bg="#3a3a3a", highlightthickness=0)
                scrollbar = ctk.CTkScrollbar(content_frame, orientation="vertical", command=canvas.yview)
                canvas.configure(yscrollcommand=scrollbar.set)
                
                scrollbar.pack(side="right", fill="y")
                canvas.pack(side="left", fill="both", expand=True, padx=10, pady=10)
                
                items_frame = ctk.CTkFrame(canvas, fg_color="#3a3a3a")
                canvas.create_window((0, 0), window=items_frame, anchor="nw")

                def on_mousewhell(event):
                    canvas.yview_scroll(int(-1*(event.delta/120)),"units")
                canvas.bind_all("<MouseWheel>", on_mousewhell)
                canvas.bind_all("<Button-4>", lambda e: canvas.yview_scroll(-1, "units"))
                canvas.bind_all("<Button-5>", lambda e: canvas.yview_scroll(1, "units"))
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∂–∏–¥–∫–æ—Å—Ç–∏ –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫
                all_liquids = default_liquids + mod_liquids
                update_grid(canvas, items_frame, all_liquids)
                
                canvas.bind("<Configure>", lambda e: update_grid(canvas, items_frame, all_liquids))
                items_frame.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))
                
                footer_frame = ctk.CTkFrame(main_frame, height=70, fg_color="#3a3a3a", corner_radius=8)
                footer_frame.pack(fill="x", pady=(15, 0))
                
                btn_frame = ctk.CTkFrame(footer_frame, fg_color="transparent")
                btn_frame.pack(expand=True, pady=15)

                def save_requirements():
                    consumes_liquids = []
                    
                    for liquid, var in default_liquid_entries.items():
                        amount = var.get()
                        if amount > 0:
                            calculated_amount = round((1 / 60) * amount, 25)
                            consumes_liquids.append({
                                "liquid": liquid,
                                "amount": calculated_amount
                            })
                    
                    for liquid, var in mod_liquid_entries.items():
                        amount = var.get()
                        if amount > 0:
                            calculated_amount = round((1 / 60) * amount, 25)
                            consumes_liquids.append({
                                "liquid": liquid,
                                "amount": calculated_amount
                            })
                    
                    if not consumes_liquids and not block_data["consumes"].get("items"):
                        messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –∂–∏–¥–∫–æ—Å—Ç–µ–π, –Ω–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤!")
                        return
                    
                    block_data["consumes"]["liquids"] = consumes_liquids
                    
                    try:
                        block_type = block_data.get("type")
                        content_folder = os.path.join("mindustry_mod_creator", "mods", mod_name, "content", "blocks", block_type)
                        os.makedirs(content_folder, exist_ok=True)
                        
                        block_path = os.path.join(content_folder, f"{block_name}.json")
                        with open(block_path, "w", encoding="utf-8") as f:
                            json.dump(block_data, f, indent=4, ensure_ascii=False)
                        
                        messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ü–æ—Ç—Ä–µ–±–ª—è–µ–º—ã–µ –∂–∏–¥–∫–æ—Å—Ç–∏ –¥–ª—è –±–ª–æ–∫–∞ '{block_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
                        open_item_GenericCrafter_editor_out(block_name, block_data)
                    
                    except Exception as e:
                        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∂–∏–¥–∫–æ—Å—Ç–∏: {str(e)}")
                
                def skip_liquids():
                    if not block_data["consumes"].get("items"):
                        messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –ø—Ä–µ–¥–º–µ—Ç, –Ω–µ–ª—å–∑—è –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∂–∏–¥–∫–æ—Å—Ç—å")
                    if block_data["consumes"].get("items"):
                        open_item_GenericCrafter_editor_out(block_name, block_data)
                
                ctk.CTkButton(btn_frame, 
                            text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", 
                            width=140, 
                            height=45,
                            font=("Arial", 14),
                            command=save_requirements).pack(side="left", padx=20)
                
                ctk.CTkButton(btn_frame, 
                            text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", 
                            width=140, 
                            height=45,
                            font=("Arial", 14),
                            fg_color="#e62525", 
                            hover_color="#701c1c", border_color="#701c1c",
                            command=skip_liquids).pack(side="left", padx=20)

            def open_item_GenericCrafter_editor_out(block_name, block_data):
                clear_window()
                root.configure(fg_color="#2b2b2b")
                
                main_frame = ctk.CTkFrame(root, fg_color="transparent")
                main_frame.pack(padx=10, pady=10, fill="both", expand=True)
                
                header_frame = ctk.CTkFrame(main_frame, height=90, fg_color="#3a3a3a", corner_radius=8)
                header_frame.pack(fill="x", pady=(0, 15))
                
                try:
                    block_type = block_data.get("type")
                    texture_path = os.path.join("mindustry_mod_creator", "mods", mod_name, "sprites", block_type, block_name, f"{block_name}.png")
                    if os.path.exists(texture_path):
                        img = Image.open(texture_path)
                        img = img.resize((70, 70), Image.LANCZOS)
                        ctk_img = ctk.CTkImage(light_image=img, size=(70, 70))
                        img_label = ctk.CTkLabel(header_frame, image=ctk_img, text="")
                        img_label.pack(side="left", padx=20)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                
                ctk.CTkLabel(header_frame, 
                            text=f"–†–µ–¥–∞–∫—Ç–æ—Ä –≤—ã—Ö–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {block_name}",
                            font=("Arial", 18, "bold")).pack(side="left", padx=10)
                
                content_frame = ctk.CTkFrame(main_frame, fg_color="#3a3a3a", corner_radius=8)
                content_frame.pack(fill="both", expand=True)
                
                def load_item_icon(item_name):
                    icon_paths = [
                        os.path.join(mod_folder, "sprites", "items", f"{item_name}.png"),
                        os.path.join("mindustry_mod_creator", "sprites", "items", f"{item_name}.png"),
                        os.path.join("mindustry_mod_creator", "icons", f"{item_name}.png")
                    ]
                    for path in icon_paths:
                        if os.path.exists(path):
                            try:
                                img = Image.open(path)
                                img = img.resize((50, 50), Image.LANCZOS)
                                return ctk.CTkImage(light_image=img, size=(50, 50))
                            except:
                                continue
                    return None
                
                # –°–ø–∏—Å–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
                default_items = [
                    "copper", "lead", "metaglass", "graphite", "sand", 
                    "coal", "titanium", "thorium", "scrap", "silicon",
                    "plastanium", "phase-fabric", "surge-alloy", "spore-pod", 
                    "blast-compound", "pyratite"
                ]
                
                mod_items = []
                mod_items_path = os.path.join(mod_folder, "content", "items")
                if os.path.exists(mod_items_path):
                    mod_items = [f.replace(".json", "") for f in os.listdir(mod_items_path) if f.endswith(".json")]

                default_item_entries = {}
                mod_item_entries = {}

                def create_item_card(parent, item, is_mod_item=False):
                    card_frame = ctk.CTkFrame(parent, 
                                            fg_color="#4a4a4a", 
                                            corner_radius=8,
                                            height=180)
                    card_frame.pack_propagate(False)
                    
                    content_frame = ctk.CTkFrame(card_frame, fg_color="transparent")
                    content_frame.pack(fill="both", expand=True, padx=10, pady=10)
                    
                    top_frame = ctk.CTkFrame(content_frame, fg_color="transparent")
                    top_frame.pack(fill="x", pady=(0, 10))
                    
                    icon = load_item_icon(item)
                    if icon:
                        ctk.CTkLabel(top_frame, image=icon, text="").pack()
                    
                    ctk.CTkLabel(top_frame, 
                                text=item.capitalize(), 
                                font=("Arial", 14),
                                anchor="center").pack()
                    
                    bottom_frame = ctk.CTkFrame(content_frame, fg_color="transparent")
                    bottom_frame.pack(fill="x", pady=(10, 0))

                    int_value = tk.IntVar(value=0)
                    str_value = tk.StringVar(value="0")
                    max_value = 50

                    def sync_values(*args):
                        try:
                            val = str_value.get()
                            int_value.set(int(val) if val else 0)
                        except:
                            int_value.set(0)
                    
                    str_value.trace_add("write", sync_values)
                    
                    def validate_input(new_val):
                        if new_val == "":
                            return True
                        if not new_val.isdigit():
                            return False
                        if len(new_val) > 2:
                            return False
                        if int(new_val) > max_value:
                            return False
                        return True
                    
                    validation = parent.register(validate_input)
                    
                    controls_frame = ctk.CTkFrame(bottom_frame, fg_color="transparent")
                    controls_frame.pack(fill="x", pady=5)
                    
                    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ grid layout
                    controls_frame.grid_columnconfigure(0, weight=0, minsize=35)
                    controls_frame.grid_columnconfigure(1, weight=1, minsize=70)
                    controls_frame.grid_columnconfigure(2, weight=0, minsize=35)
                    
                    def update_value(change):
                        try:
                            current = str_value.get()
                            try:
                                current_num = int(current) if current else 0
                            except ValueError:
                                current_num = 0
                            new_value = max(0, min(max_value, current_num + change))
                            str_value.set(str(new_value))
                        except Exception as e:
                            str_value.set("0")

                    def start_increment(change):
                        global is_pressed
                        is_pressed = True
                        update_value(change)
                        root.after(100, lambda: repeat_increment(change))

                    def stop_increment():
                        global is_pressed
                        is_pressed = False

                    def repeat_increment(change):
                        if is_pressed:
                            update_value(change)
                            root.after(100, lambda: repeat_increment(change))

                    minus_btn = ctk.CTkButton(
                        controls_frame,
                        text="-",
                        width=35,
                        height=35,
                        font=("Arial", 16),
                        fg_color="#e62525",
                        hover_color="#701c1c",
                        border_color="#701c1c",
                        corner_radius=6,
                        anchor="center"
                    )
                    minus_btn.grid(row=0, column=0, padx=(0, 5), sticky="nsew")
                    minus_btn.bind("<ButtonPress-1>", lambda e: start_increment(-1))
                    minus_btn.bind("<ButtonRelease-1>", lambda e: stop_increment())

                    entry = ctk.CTkEntry(
                        controls_frame,
                        width=70,
                        height=35,
                        font=("Arial", 14),
                        textvariable=str_value,
                        fg_color="#2e8b57",
                        border_color="#1a5232",
                        justify="center",
                        validate="key",
                        validatecommand=(validation, "%P")
                    )
                    entry.grid(row=0, column=1, padx=5, sticky="ew")

                    plus_btn = ctk.CTkButton(
                        controls_frame,
                        text="+",
                        width=35,
                        height=35,
                        font=("Arial", 16),
                        corner_radius=6,
                        anchor="center"
                    )
                    plus_btn.grid(row=0, column=2, padx=(5, 0), sticky="nsew")
                    plus_btn.bind("<ButtonPress-1>", lambda e: start_increment(1))
                    plus_btn.bind("<ButtonRelease-1>", lambda e: stop_increment())
                    
                    def handle_focus_out(event):
                        if str_value.get() == "":
                            str_value.set("0")
                    
                    entry.bind("<FocusOut>", handle_focus_out)
                    
                    if is_mod_item:
                        mod_item_entries[item] = int_value
                    else:
                        default_item_entries[item] = int_value
                    
                    return card_frame
                
                def calculate_columns(container_width):
                    min_card_width = 180
                    spacing = 10
                    max_columns = max(1, container_width // (min_card_width + spacing))
                    if max_columns * (min_card_width + spacing) - spacing <= container_width:
                        return max_columns, min_card_width
                    return 1, -1
                
                def update_grid(canvas, items_frame, items):
                    container_width = canvas.winfo_width()
                    if container_width < 1:
                        return
                    
                    columns, card_width = calculate_columns(container_width)
                    
                    for widget in items_frame.grid_slaves():
                        widget.grid_forget()
                    
                    for i, item in enumerate(items):
                        row = i // columns
                        col = i % columns
                        is_mod_item = item in mod_items
                        card = create_item_card(items_frame, item, is_mod_item)
                        if card_width == -1:
                            card.configure(width=container_width - 20)
                        else:
                            card.configure(width=card_width)
                        card.grid(row=row, column=col, padx=5, pady=5, sticky="nsew")
                    
                    items_frame.update_idletasks()
                    canvas.configure(scrollregion=canvas.bbox("all"))
                    
                    if items_frame.winfo_height() <= canvas.winfo_height():
                        canvas.yview_moveto(0)
                        scrollbar.pack_forget()
                    else:
                        scrollbar.pack(side="right", fill="y")
                
                # –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω —Å–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
                canvas = tk.Canvas(content_frame, bg="#3a3a3a", highlightthickness=0)
                scrollbar = ctk.CTkScrollbar(content_frame, orientation="vertical", command=canvas.yview)
                canvas.configure(yscrollcommand=scrollbar.set)
                
                scrollbar.pack(side="right", fill="y")
                canvas.pack(side="left", fill="both", expand=True, padx=10, pady=10)
                
                items_frame = ctk.CTkFrame(canvas, fg_color="#3a3a3a")
                canvas.create_window((0, 0), window=items_frame, anchor="nw")

                def on_mousewhell(event):
                    canvas.yview_scroll(int(-1*(event.delta/120)),"units")
                canvas.bind_all("<MouseWheel>", on_mousewhell)
                canvas.bind_all("<Button-4>", lambda e: canvas.yview_scroll(-1, "units"))
                canvas.bind_all("<Button-5>", lambda e: canvas.yview_scroll(1, "units"))
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫
                all_items = default_items + mod_items
                update_grid(canvas, items_frame, all_items)
                
                canvas.bind("<Configure>", lambda e: update_grid(canvas, items_frame, all_items))
                items_frame.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))
                
                footer_frame = ctk.CTkFrame(main_frame, height=70, fg_color="#3a3a3a", corner_radius=8)
                footer_frame.pack(fill="x", pady=(15, 0))
                
                btn_frame = ctk.CTkFrame(footer_frame, fg_color="transparent")
                btn_frame.pack(expand=True, pady=15)

                def save_requirements():
                    output_items = []
                    
                    for item, var in default_item_entries.items():
                        amount = var.get()
                        if amount > 0:
                            output_items.append({"item": item, "amount": amount})
                    
                    for item, var in mod_item_entries.items():
                        amount = var.get()
                        if amount > 0:
                            output_items.append({"item": item, "amount": amount})
                    
                    if not output_items and not block_data.get("outputLiquids"):
                        messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –Ω–∏ –∂–∏–¥–∫–æ—Å—Ç–µ–π!")
                        return
                    
                    block_data["outputItems"] = output_items
                    
                    try:
                        block_type = block_data.get("type")
                        content_folder = os.path.join("mindustry_mod_creator", "mods", mod_name, "content", "blocks", block_type)
                        os.makedirs(content_folder, exist_ok=True)
                        
                        block_path = os.path.join(content_folder, f"{block_name}.json")
                        with open(block_path, "w", encoding="utf-8") as f:
                            json.dump(block_data, f, indent=4, ensure_ascii=False)
                        
                        messagebox.showinfo("–£—Å–ø–µ—Ö", f"–í—ã—Ö–æ–¥–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –±–ª–æ–∫–∞ '{block_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
                        open_liquid_GenericCrafter_editor_out(block_name, block_data)
                    
                    except Exception as e:
                        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã: {str(e)}")
                
                def skip_items():
                    open_liquid_GenericCrafter_editor_out(block_name, block_data)
                
                ctk.CTkButton(btn_frame, 
                            text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", 
                            width=140, 
                            height=45,
                            font=("Arial", 14),
                            command=save_requirements).pack(side="left", padx=20)
                
                ctk.CTkButton(btn_frame, 
                            text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", 
                            width=140, 
                            height=45,
                            font=("Arial", 14),
                            fg_color="#e62525", 
                            hover_color="#701c1c", border_color="#701c1c",
                            command=skip_items).pack(side="left", padx=20)

            def open_liquid_GenericCrafter_editor_out(block_name, block_data):
                clear_window()
                root.configure(fg_color="#2b2b2b")
                
                main_frame = ctk.CTkFrame(root, fg_color="transparent")
                main_frame.pack(padx=10, pady=10, fill="both", expand=True)
                
                header_frame = ctk.CTkFrame(main_frame, height=90, fg_color="#3a3a3a", corner_radius=8)
                header_frame.pack(fill="x", pady=(0, 15))
                
                try:
                    block_type = block_data.get("type")
                    texture_path = os.path.join("mindustry_mod_creator", "mods", mod_name, "sprites", block_type, block_name, f"{block_name}.png")
                    if os.path.exists(texture_path):
                        img = Image.open(texture_path)
                        img = img.resize((70, 70), Image.LANCZOS)
                        ctk_img = ctk.CTkImage(light_image=img, size=(70, 70))
                        img_label = ctk.CTkLabel(header_frame, image=ctk_img, text="")
                        img_label.pack(side="left", padx=20)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                
                ctk.CTkLabel(header_frame, 
                            text=f"–†–µ–¥–∞–∫—Ç–æ—Ä –≤—ã—Ö–æ–¥–Ω—ã—Ö –∂–∏–¥–∫–æ—Å—Ç–µ–π: {block_name}",
                            font=("Arial", 18, "bold")).pack(side="left", padx=10)
                
                content_frame = ctk.CTkFrame(main_frame, fg_color="#3a3a3a", corner_radius=8)
                content_frame.pack(fill="both", expand=True)
                
                def load_liquid_icon(liquid_name):
                    icon_paths = [
                        os.path.join(mod_folder, "sprites", "liquids", f"{liquid_name}.png"),
                        os.path.join("mindustry_mod_creator", "sprites", "liquids", f"{liquid_name}.png"),
                        os.path.join("mindustry_mod_creator", "icons", f"{liquid_name}.png")
                    ]
                    for path in icon_paths:
                        if os.path.exists(path):
                            try:
                                img = Image.open(path)
                                img = img.resize((50, 50), Image.LANCZOS)
                                return ctk.CTkImage(light_image=img, size=(50, 50))
                            except:
                                continue
                    return None
                
                # –°–ø–∏—Å–∫–∏ –∂–∏–¥–∫–æ—Å—Ç–µ–π
                default_liquids = ["water", "slag", "oil", "cryofluid"]
                
                mod_liquids = []
                mod_liquids_path = os.path.join(mod_folder, "content", "liquids")
                if os.path.exists(mod_liquids_path):
                    mod_liquids = [f.replace(".json", "") for f in os.listdir(mod_liquids_path) if f.endswith(".json")]

                default_liquid_entries = {}
                mod_liquid_entries = {}

                def create_liquid_card(parent, liquid, is_mod_liquid=False):
                    card_frame = ctk.CTkFrame(parent, 
                                            fg_color="#4a4a4a", 
                                            corner_radius=8,
                                            height=180)
                    card_frame.pack_propagate(False)
                    
                    content_frame = ctk.CTkFrame(card_frame, fg_color="transparent")
                    content_frame.pack(fill="both", expand=True, padx=10, pady=10)
                    
                    top_frame = ctk.CTkFrame(content_frame, fg_color="transparent")
                    top_frame.pack(fill="x", pady=(0, 10))
                    
                    icon = load_liquid_icon(liquid)
                    if icon:
                        ctk.CTkLabel(top_frame, image=icon, text="").pack()
                    
                    ctk.CTkLabel(top_frame, 
                                text=liquid.capitalize(), 
                                font=("Arial", 14),
                                anchor="center").pack()
                    
                    bottom_frame = ctk.CTkFrame(content_frame, fg_color="transparent")
                    bottom_frame.pack(fill="x", pady=(10, 0))

                    float_value = tk.DoubleVar(value=0.0)
                    str_value = tk.StringVar(value="0")
                    max_value = 50.0

                    def sync_values(*args):
                        try:
                            val = str_value.get()
                            float_value.set(float(val) if val else 0.0)
                        except:
                            float_value.set(0.0)
                    
                    str_value.trace_add("write", sync_values)
                    
                    def validate_input(new_val):
                        if new_val == "":
                            return True
                        try:
                            val = float(new_val)
                            if val < 0 or val > max_value:
                                return False
                        except ValueError:
                            return False
                        return True
                    
                    validation = parent.register(validate_input)
                    
                    controls_frame = ctk.CTkFrame(bottom_frame, fg_color="transparent")
                    controls_frame.pack(fill="x", pady=5)
                    
                    controls_frame.grid_columnconfigure(0, weight=0, minsize=35)
                    controls_frame.grid_columnconfigure(1, weight=1, minsize=70)
                    controls_frame.grid_columnconfigure(2, weight=0, minsize=35)
                    
                    def update_value(change):
                        try:
                            current = str_value.get()
                            try:
                                current_num = float(current) if current else 0.0
                            except ValueError:
                                current_num = 0.0
                            new_value = max(0.0, min(max_value, current_num + change))
                            str_value.set(f"{new_value:.1f}")
                        except Exception as e:
                            str_value.set("0.0")

                    def start_increment(change):
                        global is_pressed
                        is_pressed = True
                        update_value(change)
                        root.after(100, lambda: repeat_increment(change))

                    def stop_increment():
                        global is_pressed
                        is_pressed = False

                    def repeat_increment(change):
                        if is_pressed:
                            update_value(change)
                            root.after(100, lambda: repeat_increment(change))

                    minus_btn = ctk.CTkButton(
                        controls_frame,
                        text="-",
                        width=35,
                        height=35,
                        font=("Arial", 16),
                        fg_color="#e62525",
                        hover_color="#701c1c",
                        border_color="#701c1c",
                        corner_radius=6,
                        anchor="center"
                    )
                    minus_btn.grid(row=0, column=0, padx=(0, 5), sticky="nsew")
                    minus_btn.bind("<ButtonPress-1>", lambda e: start_increment(-0.1))
                    minus_btn.bind("<ButtonRelease-1>", lambda e: stop_increment())

                    entry = ctk.CTkEntry(
                        controls_frame,
                        width=70,
                        height=35,
                        font=("Arial", 14),
                        textvariable=str_value,
                        fg_color="#3a7ebf",
                        border_color="#1f4b7a",
                        justify="center",
                        validate="key",
                        validatecommand=(validation, "%P")
                    )
                    entry.grid(row=0, column=1, padx=5, sticky="ew")

                    plus_btn = ctk.CTkButton(
                        controls_frame,
                        text="+",
                        width=35,
                        height=35,
                        font=("Arial", 16),
                        corner_radius=6,
                        anchor="center"
                    )
                    plus_btn.grid(row=0, column=2, padx=(5, 0), sticky="nsew")
                    plus_btn.bind("<ButtonPress-1>", lambda e: start_increment(0.1))
                    plus_btn.bind("<ButtonRelease-1>", lambda e: stop_increment())
                    
                    def handle_focus_out(event):
                        if str_value.get() == "":
                            str_value.set("1.0")
                    
                    entry.bind("<FocusOut>", handle_focus_out)
                    
                    if is_mod_liquid:
                        mod_liquid_entries[liquid] = float_value
                    else:
                        default_liquid_entries[liquid] = float_value
                    
                    return card_frame
                
                def calculate_columns(container_width):
                    min_card_width = 180
                    spacing = 10
                    max_columns = max(1, container_width // (min_card_width + spacing))
                    if max_columns * (min_card_width + spacing) - spacing <= container_width:
                        return max_columns, min_card_width
                    return 1, -1
                
                def update_grid(canvas, items_frame, items):
                    container_width = canvas.winfo_width()
                    if container_width < 1:
                        return
                    
                    columns, card_width = calculate_columns(container_width)
                    
                    for widget in items_frame.grid_slaves():
                        widget.grid_forget()
                    
                    for i, item in enumerate(items):
                        row = i // columns
                        col = i % columns
                        is_mod_liquid = item in mod_liquids
                        card = create_liquid_card(items_frame, item, is_mod_liquid)
                        if card_width == -1:
                            card.configure(width=container_width - 20)
                        else:
                            card.configure(width=card_width)
                        card.grid(row=row, column=col, padx=5, pady=5, sticky="nsew")
                    
                    items_frame.update_idletasks()
                    canvas.configure(scrollregion=canvas.bbox("all"))
                    
                    if items_frame.winfo_height() <= canvas.winfo_height():
                        canvas.yview_moveto(0)
                        scrollbar.pack_forget()
                    else:
                        scrollbar.pack(side="right", fill="y")
                
                # –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω —Å–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—Å–µ—Ö –∂–∏–¥–∫–æ—Å—Ç–µ–π
                canvas = tk.Canvas(content_frame, bg="#3a3a3a", highlightthickness=0)
                scrollbar = ctk.CTkScrollbar(content_frame, orientation="vertical", command=canvas.yview)
                canvas.configure(yscrollcommand=scrollbar.set)
                
                scrollbar.pack(side="right", fill="y")
                canvas.pack(side="left", fill="both", expand=True, padx=10, pady=10)
                
                items_frame = ctk.CTkFrame(canvas, fg_color="#3a3a3a")
                canvas.create_window((0, 0), window=items_frame, anchor="nw")

                def on_mousewhell(event):
                    canvas.yview_scroll(int(-1*(event.delta/120)),"units")
                canvas.bind_all("<MouseWheel>", on_mousewhell)
                canvas.bind_all("<Button-4>", lambda e: canvas.yview_scroll(-1, "units"))
                canvas.bind_all("<Button-5>", lambda e: canvas.yview_scroll(1, "units"))
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∂–∏–¥–∫–æ—Å—Ç–∏ –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫
                all_liquids = default_liquids + mod_liquids
                update_grid(canvas, items_frame, all_liquids)
                
                canvas.bind("<Configure>", lambda e: update_grid(canvas, items_frame, all_liquids))
                items_frame.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))
                
                footer_frame = ctk.CTkFrame(main_frame, height=70, fg_color="#3a3a3a", corner_radius=8)
                footer_frame.pack(fill="x", pady=(15, 0))
                
                btn_frame = ctk.CTkFrame(footer_frame, fg_color="transparent")
                btn_frame.pack(expand=True, pady=15)

                def save_requirements():
                    output_liquids = []
                    
                    for liquid, var in default_liquid_entries.items():
                        amount = var.get()
                        if amount > 0:
                            calculated_amount = round((1 / 60) * amount, 25)
                            output_liquids.append({
                                "liquid": liquid,
                                "amount": calculated_amount
                            })
                    
                    for liquid, var in mod_liquid_entries.items():
                        amount = var.get()
                        if amount > 0:
                            calculated_amount = round((1 / 60) * amount, 25)
                            output_liquids.append({
                                "liquid": liquid,
                                "amount": calculated_amount
                            })
                    
                    if not output_liquids and not block_data.get("outputItems"):
                        messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –∂–∏–¥–∫–æ—Å—Ç–µ–π, –Ω–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤!")
                        return
                    
                    block_data["outputLiquids"] = output_liquids
                    clean_empty_consumes(block_data)
                    
                    try:
                        block_type = block_data.get("type")
                        content_folder = os.path.join("mindustry_mod_creator", "mods", mod_name, "content", "blocks", block_type)
                        os.makedirs(content_folder, exist_ok=True)
                        
                        block_path = os.path.join(content_folder, f"{block_name}.json")
                        with open(block_path, "w", encoding="utf-8") as f:
                            json.dump(block_data, f, indent=4, ensure_ascii=False)
                        
                        messagebox.showinfo("–£—Å–ø–µ—Ö", f"–í—ã—Ö–æ–¥–Ω—ã–µ –∂–∏–¥–∫–æ—Å—Ç–∏ –¥–ª—è –±–ª–æ–∫–∞ '{block_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
                        open_requirements_editor(block_name, block_data)
                    
                    except Exception as e:
                        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∂–∏–¥–∫–æ—Å—Ç–∏: {str(e)}")
                
                def skip_liquids():
                    if not block_data.get("outputItems"):
                        messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –ø—Ä–µ–¥–º–µ—Ç, –Ω–µ–ª—å–∑—è –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∂–∏–¥–∫–æ—Å—Ç—å")
                    if block_data.get("outputItems"):
                        clean_empty_consumes(block_data)
                        open_requirements_editor(block_name, block_data)

                def clean_empty_consumes(block_data):
                    """
                    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É–¥–∞–ª—è–µ—Ç –ø—É—Å—Ç—ã–µ –º–∞—Å—Å–∏–≤—ã –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ consumes –∏ outputLiquids/outputItems
                    """
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—á–∏—â–∞–µ–º consumes
                    if "consumes" in block_data:
                        consumes = block_data["consumes"]
                        
                        # –ï—Å–ª–∏ consumes –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç, —É–¥–∞–ª—è–µ–º –µ–≥–æ
                        if consumes == {}:
                            del block_data["consumes"]
                        else:
                            # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –º–∞—Å—Å–∏–≤—ã –≤–Ω—É—Ç—Ä–∏ consumes
                            if "items" in consumes and isinstance(consumes["items"], list) and len(consumes["items"]) == 0:
                                del consumes["items"]
                            
                            if "liquids" in consumes and isinstance(consumes["liquids"], list) and len(consumes["liquids"]) == 0:
                                del consumes["liquids"]
                            
                            # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ consumes —Å—Ç–∞–ª –ø—É—Å—Ç—ã–º, —É–¥–∞–ª—è–µ–º –µ–≥–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é
                            if consumes == {}:
                                del block_data["consumes"]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—á–∏—â–∞–µ–º outputLiquids
                    if "outputLiquids" in block_data and isinstance(block_data["outputLiquids"], list) and len(block_data["outputLiquids"]) == 0:
                        del block_data["outputLiquids"]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—á–∏—â–∞–µ–º outputItems
                    if "outputItems" in block_data and isinstance(block_data["outputItems"], list) and len(block_data["outputItems"]) == 0:
                        del block_data["outputItems"]

                    if "liquidCapacity" in block_data and isinstance(block_data["liquidCapacity"], list) and len(block_data["liquidCapacity"]) == 0:
                        del block_data["liquidCapacity"]
                    
                    if "itemCapacity" in block_data and isinstance(block_data["itemCapacity"], list) and len(block_data["itemCapacity"]) == 0:
                        del block_data["itemCapacity"]
                    
                    return block_data
                
                ctk.CTkButton(btn_frame, 
                            text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", 
                            width=140, 
                            height=45,
                            font=("Arial", 14),
                            command=save_requirements).pack(side="left", padx=20)
                
                ctk.CTkButton(btn_frame, 
                            text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", 
                            width=140, 
                            height=45,
                            font=("Arial", 14),
                            fg_color="#e62525", 
                            hover_color="#701c1c", border_color="#701c1c",
                            command=skip_liquids).pack(side="left", padx=20)

            def open_item_consumes_editor(block_name, block_data):
                clear_window()
                root.configure(fg_color="#2b2b2b")
                
                main_frame = ctk.CTkFrame(root, fg_color="transparent")
                main_frame.pack(padx=10, pady=10, fill="both", expand=True)
                
                header_frame = ctk.CTkFrame(main_frame, height=90, fg_color="#3a3a3a", corner_radius=8)
                header_frame.pack(fill="x", pady=(0, 15))
                
                try:
                    block_type = block_data.get("type")
                    texture_path = os.path.join("mindustry_mod_creator", "mods", mod_name, "sprites", block_type, block_name, f"{block_name}.png")
                    if os.path.exists(texture_path):
                        img = Image.open(texture_path)
                        img = img.resize((70, 70), Image.LANCZOS)
                        ctk_img = ctk.CTkImage(light_image=img, size=(70, 70))
                        img_label = ctk.CTkLabel(header_frame, image=ctk_img, text="")
                        img_label.pack(side="left", padx=20)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                
                ctk.CTkLabel(header_frame, 
                            text=f"–†–µ–¥–∞–∫—Ç–æ—Ä –ø–æ—Ç—Ä–µ–±–ª—è–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {block_name}",
                            font=("Arial", 18, "bold")).pack(side="left", padx=10)
                
                content_frame = ctk.CTkFrame(main_frame, fg_color="#3a3a3a", corner_radius=8)
                content_frame.pack(fill="both", expand=True)
                
                def load_item_icon(item_name):
                    icon_paths = [
                        os.path.join(mod_folder, "sprites", "items", f"{item_name}.png"),
                        os.path.join("mindustry_mod_creator", "sprites", "items", f"{item_name}.png"),
                        os.path.join("mindustry_mod_creator", "icons", f"{item_name}.png")
                    ]
                    for path in icon_paths:
                        if os.path.exists(path):
                            try:
                                img = Image.open(path)
                                img = img.resize((50, 50), Image.LANCZOS)
                                return ctk.CTkImage(light_image=img, size=(50, 50))
                            except:
                                continue
                    return None
                
                # –°–ø–∏—Å–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
                default_items = [
                    "copper", "lead", "metaglass", "graphite", "sand", 
                    "coal", "titanium", "thorium", "scrap", "silicon",
                    "plastanium", "phase-fabric", "surge-alloy", "spore-pod", 
                    "blast-compound", "pyratite"
                ]
                
                mod_items = []
                mod_items_path = os.path.join(mod_folder, "content", "items")
                if os.path.exists(mod_items_path):
                    mod_items = [f.replace(".json", "") for f in os.listdir(mod_items_path) if f.endswith(".json")]

                default_item_entries = {}
                mod_item_entries = {}

                def create_item_card(parent, item, is_mod_item=False):
                    card_frame = ctk.CTkFrame(parent, 
                                            fg_color="#4a4a4a", 
                                            corner_radius=8,
                                            height=180)
                    card_frame.pack_propagate(False)
                    
                    content_frame = ctk.CTkFrame(card_frame, fg_color="transparent")
                    content_frame.pack(fill="both", expand=True, padx=10, pady=10)
                    
                    top_frame = ctk.CTkFrame(content_frame, fg_color="transparent")
                    top_frame.pack(fill="x", pady=(0, 10))
                    
                    icon = load_item_icon(item)
                    if icon:
                        ctk.CTkLabel(top_frame, image=icon, text="").pack()
                    
                    ctk.CTkLabel(top_frame, 
                                text=item.capitalize(), 
                                font=("Arial", 14),
                                anchor="center").pack()
                    
                    bottom_frame = ctk.CTkFrame(content_frame, fg_color="transparent")
                    bottom_frame.pack(fill="x", pady=(10, 0))

                    int_value = tk.IntVar(value=0)
                    str_value = tk.StringVar(value="0")
                    max_value = 50

                    def sync_values(*args):
                        try:
                            val = str_value.get()
                            int_value.set(int(val) if val else 0)
                        except:
                            int_value.set(0)
                    
                    str_value.trace_add("write", sync_values)
                    
                    def validate_input(new_val):
                        if new_val == "":
                            return True
                        if not new_val.isdigit():
                            return False
                        if len(new_val) > 2:
                            return False
                        if int(new_val) > max_value:
                            return False
                        return True
                    
                    validation = parent.register(validate_input)
                    
                    controls_frame = ctk.CTkFrame(bottom_frame, fg_color="transparent")
                    controls_frame.pack(fill="x", pady=5)
                    
                    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ grid layout
                    controls_frame.grid_columnconfigure(0, weight=0, minsize=35)
                    controls_frame.grid_columnconfigure(1, weight=1, minsize=70)
                    controls_frame.grid_columnconfigure(2, weight=0, minsize=35)
                    
                    def update_value(change):
                        try:
                            current = str_value.get()
                            try:
                                current_num = int(current) if current else 0
                            except ValueError:
                                current_num = 0
                            new_value = max(0, min(max_value, current_num + change))
                            str_value.set(str(new_value))
                        except Exception as e:
                            str_value.set("0")

                    def start_increment(change):
                        global is_pressed
                        is_pressed = True
                        update_value(change)
                        root.after(100, lambda: repeat_increment(change))

                    def stop_increment():
                        global is_pressed
                        is_pressed = False

                    def repeat_increment(change):
                        if is_pressed:
                            update_value(change)
                            root.after(100, lambda: repeat_increment(change))

                    minus_btn = ctk.CTkButton(
                        controls_frame,
                        text="-",
                        width=35,
                        height=35,
                        font=("Arial", 16),
                        fg_color="#e62525",
                        hover_color="#701c1c",
                        border_color="#701c1c",
                        corner_radius=6,
                        anchor="center"
                    )
                    minus_btn.grid(row=0, column=0, padx=(0, 5), sticky="nsew")
                    minus_btn.bind("<ButtonPress-1>", lambda e: start_increment(-1))
                    minus_btn.bind("<ButtonRelease-1>", lambda e: stop_increment())

                    entry = ctk.CTkEntry(
                        controls_frame,
                        width=70,
                        height=35,
                        font=("Arial", 14),
                        textvariable=str_value,
                        fg_color="#BE6F24",
                        border_color="#613e11",
                        justify="center",
                        validate="key",
                        validatecommand=(validation, "%P")
                    )
                    entry.grid(row=0, column=1, padx=5, sticky="ew")

                    plus_btn = ctk.CTkButton(
                        controls_frame,
                        text="+",
                        width=35,
                        height=35,
                        font=("Arial", 16),
                        corner_radius=6,
                        anchor="center"
                    )
                    plus_btn.grid(row=0, column=2, padx=(5, 0), sticky="nsew")
                    plus_btn.bind("<ButtonPress-1>", lambda e: start_increment(1))
                    plus_btn.bind("<ButtonRelease-1>", lambda e: stop_increment())
                    
                    def handle_focus_out(event):
                        if str_value.get() == "":
                            str_value.set("0")
                    
                    entry.bind("<FocusOut>", handle_focus_out)
                    
                    if is_mod_item:
                        mod_item_entries[item] = int_value
                    else:
                        default_item_entries[item] = int_value
                    
                    return card_frame
                
                def calculate_columns(container_width):
                    min_card_width = 180
                    spacing = 10
                    max_columns = max(1, container_width // (min_card_width + spacing))
                    if max_columns * (min_card_width + spacing) - spacing <= container_width:
                        return max_columns, min_card_width
                    return 1, -1
                
                def update_grid(canvas, items_frame, items):
                    container_width = canvas.winfo_width()
                    if container_width < 1:
                        return
                    
                    columns, card_width = calculate_columns(container_width)
                    
                    for widget in items_frame.grid_slaves():
                        widget.grid_forget()
                    
                    for i, item in enumerate(items):
                        row = i // columns
                        col = i % columns
                        is_mod_item = item in mod_items
                        card = create_item_card(items_frame, item, is_mod_item)
                        if card_width == -1:
                            card.configure(width=container_width - 20)
                        else:
                            card.configure(width=card_width)
                        card.grid(row=row, column=col, padx=5, pady=5, sticky="nsew")
                    
                    items_frame.update_idletasks()
                    canvas.configure(scrollregion=canvas.bbox("all"))
                    
                    if items_frame.winfo_height() <= canvas.winfo_height():
                        canvas.yview_moveto(0)
                        scrollbar.pack_forget()
                    else:
                        scrollbar.pack(side="right", fill="y")
                
                # –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω —Å–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
                canvas = tk.Canvas(content_frame, bg="#3a3a3a", highlightthickness=0)
                scrollbar = ctk.CTkScrollbar(content_frame, orientation="vertical", command=canvas.yview)
                canvas.configure(yscrollcommand=scrollbar.set)
                
                scrollbar.pack(side="right", fill="y")
                canvas.pack(side="left", fill="both", expand=True, padx=10, pady=10)
                
                items_frame = ctk.CTkFrame(canvas, fg_color="#3a3a3a")
                canvas.create_window((0, 0), window=items_frame, anchor="nw")

                def on_mousewhell(event):
                    canvas.yview_scroll(int(-1*(event.delta/120)),"units")
                canvas.bind_all("<MouseWheel>", on_mousewhell)
                canvas.bind_all("<Button-4>", lambda e: canvas.yview_scroll(-1, "units"))
                canvas.bind_all("<Button-5>", lambda e: canvas.yview_scroll(1, "units"))
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫
                all_items = default_items + mod_items
                update_grid(canvas, items_frame, all_items)
                
                canvas.bind("<Configure>", lambda e: update_grid(canvas, items_frame, all_items))
                items_frame.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))
                
                footer_frame = ctk.CTkFrame(main_frame, height=70, fg_color="#3a3a3a", corner_radius=8)
                footer_frame.pack(fill="x", pady=(15, 0))
                
                btn_frame = ctk.CTkFrame(footer_frame, fg_color="transparent")
                btn_frame.pack(expand=True, pady=15)

                def save_requirements():
                    consumes_items = []
                    
                    for item, var in default_item_entries.items():
                        amount = var.get()
                        if amount > 0:
                            consumes_items.append({"item": item, "amount": amount})
                    
                    for item, var in mod_item_entries.items():
                        amount = var.get()
                        if amount > 0:
                            consumes_items.append({"item": item, "amount": amount})
                    
                    if not consumes_items and not block_data["consumes"].get("liquids"):
                        messagebox.showerror("–û—à–∏–±–∫–∞", "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã —á—Ç–æ-—Ç–æ –æ–¥–Ω–æ: –ø—Ä–µ–¥–º–µ—Ç—ã –ò–õ–ò –∂–∏–¥–∫–æ—Å—Ç–∏!")
                        return
                    
                    block_data["consumes"]["items"] = consumes_items
                    
                    try:
                        block_type = block_data.get("type")
                        content_folder = os.path.join("mindustry_mod_creator", "mods", mod_name, "content", "blocks", block_type)
                        os.makedirs(content_folder, exist_ok=True)
                        
                        block_path = os.path.join(content_folder, f"{block_name}.json")
                        with open(block_path, "w", encoding="utf-8") as f:
                            json.dump(block_data, f, indent=4, ensure_ascii=False)
                        
                        messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ü–æ—Ç—Ä–µ–±–ª—è–µ–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –±–ª–æ–∫–∞ '{block_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
                        open_liquid_consumes_editor(block_name, block_data)
                    
                    except Exception as e:
                        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã: {str(e)}")
                
                def skip_items():
                    open_liquid_consumes_editor(block_name, block_data)
                
                ctk.CTkButton(btn_frame, 
                            text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", 
                            width=140, 
                            height=45,
                            font=("Arial", 14),
                            command=save_requirements).pack(side="left", padx=20)
                
                ctk.CTkButton(btn_frame, 
                            text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", 
                            width=140, 
                            height=45,
                            font=("Arial", 14),
                            fg_color="#e62525", 
                            hover_color="#701c1c", border_color="#701c1c",
                            command=skip_items).pack(side="left", padx=20)

            def open_liquid_consumes_editor(block_name, block_data):
                clear_window()
                root.configure(fg_color="#2b2b2b")
                
                main_frame = ctk.CTkFrame(root, fg_color="transparent")
                main_frame.pack(padx=10, pady=10, fill="both", expand=True)
                
                header_frame = ctk.CTkFrame(main_frame, height=90, fg_color="#3a3a3a", corner_radius=8)
                header_frame.pack(fill="x", pady=(0, 15))
                
                try:
                    block_type = block_data.get("type")
                    texture_path = os.path.join("mindustry_mod_creator", "mods", mod_name, "sprites", block_type, block_name, f"{block_name}.png")
                    if os.path.exists(texture_path):
                        img = Image.open(texture_path)
                        img = img.resize((70, 70), Image.LANCZOS)
                        ctk_img = ctk.CTkImage(light_image=img, size=(70, 70))
                        img_label = ctk.CTkLabel(header_frame, image=ctk_img, text="")
                        img_label.pack(side="left", padx=20)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                
                ctk.CTkLabel(header_frame, 
                            text=f"–†–µ–¥–∞–∫—Ç–æ—Ä –ø–æ—Ç—Ä–µ–±–ª—è–µ–º—ã—Ö –∂–∏–¥–∫–æ—Å—Ç–µ–π: {block_name}",
                            font=("Arial", 18, "bold")).pack(side="left", padx=10)
                
                content_frame = ctk.CTkFrame(main_frame, fg_color="#3a3a3a", corner_radius=8)
                content_frame.pack(fill="both", expand=True)
                
                def load_liquid_icon(liquid_name):
                    icon_paths = [
                        os.path.join(mod_folder, "sprites", "liquids", f"{liquid_name}.png"),
                        os.path.join("mindustry_mod_creator", "sprites", "liquids", f"{liquid_name}.png"),
                        os.path.join("mindustry_mod_creator", "icons", f"{liquid_name}.png")
                    ]
                    for path in icon_paths:
                        if os.path.exists(path):
                            try:
                                img = Image.open(path)
                                img = img.resize((50, 50), Image.LANCZOS)
                                return ctk.CTkImage(light_image=img, size=(50, 50))
                            except:
                                continue
                    return None
                
                # –°–ø–∏—Å–∫–∏ –∂–∏–¥–∫–æ—Å—Ç–µ–π
                default_liquids = ["water", "slag", "oil", "cryofluid"]
                
                mod_liquids = []
                mod_liquids_path = os.path.join(mod_folder, "content", "liquids")
                if os.path.exists(mod_liquids_path):
                    mod_liquids = [f.replace(".json", "") for f in os.listdir(mod_liquids_path) if f.endswith(".json")]

                default_liquid_entries = {}
                mod_liquid_entries = {}

                def create_liquid_card(parent, liquid, is_mod_liquid=False):
                    card_frame = ctk.CTkFrame(parent, 
                                            fg_color="#4a4a4a", 
                                            corner_radius=8,
                                            height=180)
                    card_frame.pack_propagate(False)
                    
                    content_frame = ctk.CTkFrame(card_frame, fg_color="transparent")
                    content_frame.pack(fill="both", expand=True, padx=10, pady=10)
                    
                    top_frame = ctk.CTkFrame(content_frame, fg_color="transparent")
                    top_frame.pack(fill="x", pady=(0, 10))
                    
                    icon = load_liquid_icon(liquid)
                    if icon:
                        ctk.CTkLabel(top_frame, image=icon, text="").pack()
                    
                    ctk.CTkLabel(top_frame, 
                                text=liquid.capitalize(), 
                                font=("Arial", 14),
                                anchor="center").pack()
                    
                    bottom_frame = ctk.CTkFrame(content_frame, fg_color="transparent")
                    bottom_frame.pack(fill="x", pady=(10, 0))

                    float_value = tk.DoubleVar(value=0.0)
                    str_value = tk.StringVar(value="0")
                    max_value = 50.0

                    def sync_values(*args):
                        try:
                            val = str_value.get()
                            float_value.set(float(val) if val else 0.0)
                        except:
                            float_value.set(0.0)
                    
                    str_value.trace_add("write", sync_values)
                    
                    def validate_input(new_val):
                        if new_val == "":
                            return True
                        try:
                            val = float(new_val)
                            if val < 0 or val > max_value:
                                return False
                        except ValueError:
                            return False
                        return True
                    
                    validation = parent.register(validate_input)
                    
                    controls_frame = ctk.CTkFrame(bottom_frame, fg_color="transparent")
                    controls_frame.pack(fill="x", pady=5)
                    
                    controls_frame.grid_columnconfigure(0, weight=0, minsize=35)
                    controls_frame.grid_columnconfigure(1, weight=1, minsize=70)
                    controls_frame.grid_columnconfigure(2, weight=0, minsize=35)
                    
                    def update_value(change):
                        try:
                            current = str_value.get()
                            try:
                                current_num = float(current) if current else 0.0
                            except ValueError:
                                current_num = 0.0
                            new_value = max(0.0, min(max_value, current_num + change))
                            str_value.set(f"{new_value:.1f}")
                        except Exception as e:
                            str_value.set("0.0")

                    def start_increment(change):
                        global is_pressed
                        is_pressed = True
                        update_value(change)
                        root.after(100, lambda: repeat_increment(change))

                    def stop_increment():
                        global is_pressed
                        is_pressed = False

                    def repeat_increment(change):
                        if is_pressed:
                            update_value(change)
                            root.after(100, lambda: repeat_increment(change))

                    minus_btn = ctk.CTkButton(
                        controls_frame,
                        text="-",
                        width=35,
                        height=35,
                        font=("Arial", 16),
                        fg_color="#e62525",
                        hover_color="#701c1c",
                        border_color="#701c1c",
                        corner_radius=6,
                        anchor="center"
                    )
                    minus_btn.grid(row=0, column=0, padx=(0, 5), sticky="nsew")
                    minus_btn.bind("<ButtonPress-1>", lambda e: start_increment(-0.1))
                    minus_btn.bind("<ButtonRelease-1>", lambda e: stop_increment())

                    entry = ctk.CTkEntry(
                        controls_frame,
                        width=70,
                        height=35,
                        font=("Arial", 14),
                        textvariable=str_value,
                        fg_color="#3a7ebf",
                        border_color="#1f4b7a",
                        justify="center",
                        validate="key",
                        validatecommand=(validation, "%P")
                    )
                    entry.grid(row=0, column=1, padx=5, sticky="ew")

                    plus_btn = ctk.CTkButton(
                        controls_frame,
                        text="+",
                        width=35,
                        height=35,
                        font=("Arial", 16),
                        corner_radius=6,
                        anchor="center"
                    )
                    plus_btn.grid(row=0, column=2, padx=(5, 0), sticky="nsew")
                    plus_btn.bind("<ButtonPress-1>", lambda e: start_increment(0.1))
                    plus_btn.bind("<ButtonRelease-1>", lambda e: stop_increment())
                    
                    def handle_focus_out(event):
                        if str_value.get() == "":
                            str_value.set("1.0")
                    
                    entry.bind("<FocusOut>", handle_focus_out)
                    
                    if is_mod_liquid:
                        mod_liquid_entries[liquid] = float_value
                    else:
                        default_liquid_entries[liquid] = float_value
                    
                    return card_frame
                
                def calculate_columns(container_width):
                    min_card_width = 180
                    spacing = 10
                    max_columns = max(1, container_width // (min_card_width + spacing))
                    if max_columns * (min_card_width + spacing) - spacing <= container_width:
                        return max_columns, min_card_width
                    return 1, -1
                
                def update_grid(canvas, items_frame, items):
                    container_width = canvas.winfo_width()
                    if container_width < 1:
                        return
                    
                    columns, card_width = calculate_columns(container_width)
                    
                    for widget in items_frame.grid_slaves():
                        widget.grid_forget()
                    
                    for i, item in enumerate(items):
                        row = i // columns
                        col = i % columns
                        is_mod_liquid = item in mod_liquids
                        card = create_liquid_card(items_frame, item, is_mod_liquid)
                        if card_width == -1:
                            card.configure(width=container_width - 20)
                        else:
                            card.configure(width=card_width)
                        card.grid(row=row, column=col, padx=5, pady=5, sticky="nsew")
                    
                    items_frame.update_idletasks()
                    canvas.configure(scrollregion=canvas.bbox("all"))
                    
                    if items_frame.winfo_height() <= canvas.winfo_height():
                        canvas.yview_moveto(0)
                        scrollbar.pack_forget()
                    else:
                        scrollbar.pack(side="right", fill="y")
                
                # –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω —Å–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—Å–µ—Ö –∂–∏–¥–∫–æ—Å—Ç–µ–π
                canvas = tk.Canvas(content_frame, bg="#3a3a3a", highlightthickness=0)
                scrollbar = ctk.CTkScrollbar(content_frame, orientation="vertical", command=canvas.yview)
                canvas.configure(yscrollcommand=scrollbar.set)
                
                scrollbar.pack(side="right", fill="y")
                canvas.pack(side="left", fill="both", expand=True, padx=10, pady=10)
                
                items_frame = ctk.CTkFrame(canvas, fg_color="#3a3a3a")
                canvas.create_window((0, 0), window=items_frame, anchor="nw")

                def on_mousewhell(event):
                    canvas.yview_scroll(int(-1*(event.delta/120)),"units")
                canvas.bind_all("<MouseWheel>", on_mousewhell)
                canvas.bind_all("<Button-4>", lambda e: canvas.yview_scroll(-1, "units"))
                canvas.bind_all("<Button-5>", lambda e: canvas.yview_scroll(1, "units"))
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∂–∏–¥–∫–æ—Å—Ç–∏ –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫
                all_liquids = default_liquids + mod_liquids
                update_grid(canvas, items_frame, all_liquids)
                
                canvas.bind("<Configure>", lambda e: update_grid(canvas, items_frame, all_liquids))
                items_frame.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))
                
                footer_frame = ctk.CTkFrame(main_frame, height=70, fg_color="#3a3a3a", corner_radius=8)
                footer_frame.pack(fill="x", pady=(15, 0))
                
                btn_frame = ctk.CTkFrame(footer_frame, fg_color="transparent")
                btn_frame.pack(expand=True, pady=15)

                def save_requirements():
                    consumes_liquids = []
                    
                    for liquid, var in default_liquid_entries.items():
                        amount = var.get()
                        if amount > 0:
                            calculated_amount = round((1 / 60) * amount, 25)
                            consumes_liquids.append({
                                "liquid": liquid,
                                "amount": calculated_amount
                            })
                    
                    for liquid, var in mod_liquid_entries.items():
                        amount = var.get()
                        if amount > 0: 
                            calculated_amount = round((1 / 60) * amount, 25)
                            consumes_liquids.append({
                                "liquid": liquid,
                                "amount": calculated_amount
                            })
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã —á—Ç–æ-—Ç–æ –æ–¥–Ω–æ (–ø—Ä–µ–¥–º–µ—Ç—ã –∏–ª–∏ –∂–∏–¥–∫–æ—Å—Ç–∏)
                    if not block_data["consumes"].get("items") and not consumes_liquids:
                        messagebox.showerror("–û—à–∏–±–∫–∞", "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã —á—Ç–æ-—Ç–æ –æ–¥–Ω–æ: –ø—Ä–µ–¥–º–µ—Ç—ã –ò–õ–ò –∂–∏–¥–∫–æ—Å—Ç–∏!")
                        return
                    
                    block_data["consumes"]["liquids"] = consumes_liquids
                    clean_empty_consumes(block_data)
                    
                    try:
                        block_type = block_data.get("type")
                        content_folder = os.path.join("mindustry_mod_creator", "mods", mod_name, "content", "blocks", block_type)
                        os.makedirs(content_folder, exist_ok=True)
                        
                        block_path = os.path.join(content_folder, f"{block_name}.json")
                        with open(block_path, "w", encoding="utf-8") as f:
                            json.dump(block_data, f, indent=4, ensure_ascii=False)
                        
                        messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ü–æ—Ç—Ä–µ–±–ª—è–µ–º—ã–µ –∂–∏–¥–∫–æ—Å—Ç–∏ –¥–ª—è –±–ª–æ–∫–∞ '{block_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
                        open_requirements_editor(block_name, block_data)
                    
                    except Exception as e:
                        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∂–∏–¥–∫–æ—Å—Ç–∏: {str(e)}")

                def clean_empty_consumes(block_data):
                    """
                    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É–¥–∞–ª—è–µ—Ç –ø—É—Å—Ç—ã–µ –º–∞—Å—Å–∏–≤—ã –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ consumes –∏ outputLiquids/outputItems
                    """
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—á–∏—â–∞–µ–º consumes
                    if "consumes" in block_data:
                        consumes = block_data["consumes"]
                        
                        # –ï—Å–ª–∏ consumes –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç, —É–¥–∞–ª—è–µ–º –µ–≥–æ
                        if consumes == {}:
                            del block_data["consumes"]
                        else:
                            # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –º–∞—Å—Å–∏–≤—ã –≤–Ω—É—Ç—Ä–∏ consumes
                            if "items" in consumes and isinstance(consumes["items"], list) and len(consumes["items"]) == 0:
                                del consumes["items"]
                            
                            if "liquids" in consumes and isinstance(consumes["liquids"], list) and len(consumes["liquids"]) == 0:
                                del consumes["liquids"]
                            
                            # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ consumes —Å—Ç–∞–ª –ø—É—Å—Ç—ã–º, —É–¥–∞–ª—è–µ–º –µ–≥–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é
                            if consumes == {}:
                                del block_data["consumes"]

                    if "liquidCapacity" in block_data and isinstance(block_data["liquidCapacity"], list) and len(block_data["liquidCapacity"]) == 0:
                        del block_data["liquidCapacity"]
                    
                    if "itemCapacity" in block_data and isinstance(block_data["itemCapacity"], list) and len(block_data["itemCapacity"]) == 0:
                        del block_data["itemCapacity"]
                    
                    return block_data

                def skip_liquids():
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã —á—Ç–æ-—Ç–æ –≤ –ø–æ—Ç—Ä–µ–±–ª—è–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–∞—Ö
                    if not block_data["consumes"].get("items"):
                        messagebox.showerror("–û—à–∏–±–∫–∞", "–ï—Å–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏–∏–ª –ø—Ä–µ–¥–º–µ—Ç –¥–æ–±–∞–≤—Ç–µ –∂–∏–¥–∫–æ—Å—Ç—å")
                        return
                    if block_data["consumes"].get("items"):
                        clean_empty_consumes(block_data)
                        open_requirements_editor(block_name, block_data)
                
                ctk.CTkButton(btn_frame, 
                            text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", 
                            width=140, 
                            height=45,
                            font=("Arial", 14),
                            command=save_requirements).pack(side="left", padx=20)
                
                ctk.CTkButton(btn_frame, 
                            text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", 
                            width=140, 
                            height=45,
                            font=("Arial", 14),
                            fg_color="#e62525", 
                            hover_color="#701c1c", border_color="#701c1c",
                            command=skip_liquids).pack(side="left", padx=20)

            def open_solidpump_liquid_edit(block_name, block_data):
                clear_window()
                root.configure(fg_color="#2b2b2b")
                
                main_frame = ctk.CTkFrame(root, fg_color="transparent")
                main_frame.pack(padx=10, pady=10, fill="both", expand=True)
                
                header_frame = ctk.CTkFrame(main_frame, height=90, fg_color="#3a3a3a", corner_radius=8)
                header_frame.pack(fill="x", pady=(0, 15))
                
                try:
                    block_type = block_data.get("type")
                    texture_path = os.path.join("mindustry_mod_creator", "mods", mod_name, "sprites", block_type, block_name, f"{block_name}.png")
                    if os.path.exists(texture_path):
                        img = Image.open(texture_path)
                        img = img.resize((70, 70), Image.LANCZOS)
                        ctk_img = ctk.CTkImage(light_image=img, size=(70, 70))
                        img_label = ctk.CTkLabel(header_frame, image=ctk_img, text="")
                        img_label.pack(side="left", padx=20)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                
                ctk.CTkLabel(header_frame, 
                            text=f"–í—ã–±–æ—Ä –∂–∏–¥–∫–æ—Å—Ç–∏ –¥–ª—è –Ω–∞—Å–æ—Å–∞: {block_name}",
                            font=("Arial", 18, "bold")).pack(side="left", padx=10)
                
                content_frame = ctk.CTkFrame(main_frame, fg_color="#3a3a3a", corner_radius=8)
                content_frame.pack(fill="both", expand=True)
                
                def load_liquid_icon(liquid_name):
                    icon_paths = [
                        os.path.join(mod_folder, "sprites", "liquids", f"{liquid_name}.png"),
                        os.path.join("mindustry_mod_creator", "sprites", "liquids", f"{liquid_name}.png"),
                        os.path.join("mindustry_mod_creator", "icons", f"{liquid_name}.png")
                    ]
                    for path in icon_paths:
                        if os.path.exists(path):
                            try:
                                img = Image.open(path)
                                img = img.resize((50, 50), Image.LANCZOS)
                                return ctk.CTkImage(light_image=img, size=(50, 50))
                            except:
                                continue
                    return None
                
                # –°–ø–∏—Å–∫–∏ –∂–∏–¥–∫–æ—Å—Ç–µ–π
                default_liquids = ["water", "slag", "oil", "cryofluid"]
                
                mod_liquids = []
                mod_liquids_path = os.path.join(mod_folder, "content", "liquids")
                if os.path.exists(mod_liquids_path):
                    mod_liquids = [f.replace(".json", "") for f in os.listdir(mod_liquids_path) if f.endswith(".json")]

                def create_liquid_card(parent, liquid, is_mod_liquid=False):
                    card_frame = ctk.CTkFrame(parent, 
                                            fg_color="#4a4a4a", 
                                            corner_radius=8,
                                            height=180)
                    card_frame.pack_propagate(False)
                    
                    content_frame = ctk.CTkFrame(card_frame, fg_color="transparent")
                    content_frame.pack(fill="both", expand=True, padx=10, pady=10)
                    
                    top_frame = ctk.CTkFrame(content_frame, fg_color="transparent")
                    top_frame.pack(fill="x", pady=(0, 10))
                    
                    icon = load_liquid_icon(liquid)
                    if icon:
                        ctk.CTkLabel(top_frame, image=icon, text="").pack()
                    
                    ctk.CTkLabel(top_frame, 
                                text=liquid.capitalize(), 
                                font=("Arial", 14),
                                anchor="center").pack()
                    
                    bottom_frame = ctk.CTkFrame(content_frame, fg_color="transparent")
                    bottom_frame.pack(fill="x", pady=(10, 0))

                    select_btn = ctk.CTkButton(
                        bottom_frame,
                        text="–í—ã–±—Ä–∞—Ç—å",
                        width=120,
                        height=35,
                        font=("Arial", 14),
                        command=lambda: select_liquid(liquid)
                    )
                    select_btn.pack(pady=10)
                    
                    return card_frame
                
                def select_liquid(liquid):
                    # –î–æ–±–∞–≤–ª—è–µ–º {"result": liquid} –≤ JSON –±–ª–æ–∫–∞
                    block_data["result"] = liquid
                    
                    try:
                        block_type = block_data.get("type")
                        content_folder = os.path.join("mindustry_mod_creator", "mods", mod_name, "content", "blocks", block_type)
                        os.makedirs(content_folder, exist_ok=True)
                        
                        block_path = os.path.join(content_folder, f"{block_name}.json")
                        with open(block_path, "w", encoding="utf-8") as f:
                            json.dump(block_data, f, indent=4, ensure_ascii=False)
                        
                        messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ñ–∏–¥–∫–æ—Å—Ç—å '{liquid}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–ª–æ–∫ '{block_name}'!")
                        # –°—Ä–∞–∑—É –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
                        open_requirements_editor(block_name, block_data)
                    
                    except Exception as e:
                        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∂–∏–¥–∫–æ—Å—Ç—å: {str(e)}")
                
                def calculate_columns(container_width):
                    min_card_width = 180
                    spacing = 10
                    max_columns = max(1, container_width // (min_card_width + spacing))
                    if max_columns * (min_card_width + spacing) - spacing <= container_width:
                        return max_columns, min_card_width
                    return 1, -1
                
                def update_grid(canvas, items_frame, items):
                    container_width = canvas.winfo_width()
                    if container_width < 1:
                        return
                    
                    columns, card_width = calculate_columns(container_width)
                    
                    for widget in items_frame.grid_slaves():
                        widget.grid_forget()
                    
                    for i, item in enumerate(items):
                        row = i // columns
                        col = i % columns
                        is_mod_liquid = item in mod_liquids
                        card = create_liquid_card(items_frame, item, is_mod_liquid)
                        if card_width == -1:
                            card.configure(width=container_width - 20)
                        else:
                            card.configure(width=card_width)
                        card.grid(row=row, column=col, padx=5, pady=5, sticky="nsew")
                    
                    items_frame.update_idletasks()
                    canvas.configure(scrollregion=canvas.bbox("all"))
                    
                    if items_frame.winfo_height() <= canvas.winfo_height():
                        canvas.yview_moveto(0)
                        scrollbar.pack_forget()
                    else:
                        scrollbar.pack(side="right", fill="y")
                
                # –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω —Å–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—Å–µ—Ö –∂–∏–¥–∫–æ—Å—Ç–µ–π
                canvas = tk.Canvas(content_frame, bg="#3a3a3a", highlightthickness=0)
                scrollbar = ctk.CTkScrollbar(content_frame, orientation="vertical", command=canvas.yview)
                canvas.configure(yscrollcommand=scrollbar.set)
                
                scrollbar.pack(side="right", fill="y")
                canvas.pack(side="left", fill="both", expand=True, padx=10, pady=10)
                
                items_frame = ctk.CTkFrame(canvas, fg_color="#3a3a3a")
                canvas.create_window((0, 0), window=items_frame, anchor="nw")

                def on_mousewheel(event):
                    canvas.yview_scroll(int(-1*(event.delta/120)), "units")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –¥–ª—è Linux
                def on_button_4(event):
                    canvas.yview_scroll(-1, "units")
                
                def on_button_5(event):
                    canvas.yview_scroll(1, "units")
                
                # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
                canvas.bind_all("<MouseWheel>", on_mousewheel)
                canvas.bind_all("<Button-4>", on_button_4)
                canvas.bind_all("<Button-5>", on_button_5)
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∂–∏–¥–∫–æ—Å—Ç–∏ –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫
                all_liquids = default_liquids + mod_liquids
                
                # –°—Ä–∞–∑—É –≤—ã–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–∫–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
                canvas.after(100, lambda: update_grid(canvas, items_frame, all_liquids))
                
                canvas.bind("<Configure>", lambda e: update_grid(canvas, items_frame, all_liquids))
                items_frame.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))

            #/////////////////////////////////////////////////////////////////////////////////
            def cb_creator_b(block_type):
                clear_window()
                
                # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –≤–∏–¥–∂–µ—Ç–æ–≤
                widgets = {}
                
                # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–æ–ª—è (–æ–±—â–∏–µ –¥–ª—è –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤)
                def create_global_fields():
                    widgets['name'] = create_field(f"–ò–º—è {get_block_name(block_type)}", 350)
                    widgets['desc'] = create_field("–û–ø–∏—Å–∞–Ω–∏–µ", 350)
                    widgets['health'] = create_field("–•–ü", 150)
                    widgets['build_time'] = create_field("–í—Ä–µ–º—è —Å—Ç—Ä–æ–π–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–º–∞–∫—Å. 120)", 150)
                
                # –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—è (—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞)
                def create_local_fields():
                    # –ë–ª–æ–∫–∏ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º 1 (–±–µ–∑ –≤–≤–æ–¥–∞)
                    fixed_size_1_blocks = ["conveyor", "conduit", "Junction", "Unloader", "liquid_router", "LiquidJunction", "BeamNode"]
                    
                    # –ë–ª–æ–∫–∏ —Å —Ä–∞–∑–º–µ—Ä–æ–º 1-2 (—Ç–æ–ª—å–∫–æ router)
                    size_1_2_blocks = ["router"]
                    
                    # –ë–ª–æ–∫–∏ —Å —Ä–∞–∑–º–µ—Ä–æ–º 1-15 (–≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ)
                    size_1_15_blocks = ["PowerNode", "wall", "SolarGenerator", "GenericCrafter", "StorageBlock", 
                                    "ConsumeGenerator", "Battery", "ThermalGenerator", "Liquid_Tank", "Pump", "SolidPump"]
                    
                    if block_type in fixed_size_1_blocks:
                        # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä 1 - —Å–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ
                        widgets['size'] = ctk.CTkEntry(root, width=150)
                        widgets['size'].insert(0, "1")
                        widgets['size'].pack_forget()  # –°–∫—Ä—ã–≤–∞–µ–º, –Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –µ—Å—Ç—å
                        
                    elif block_type in size_1_2_blocks:
                        # –†–∞–∑–º–µ—Ä 1-2
                        widgets['size'] = create_field("–†–∞–∑–º–µ—Ä (1-2)", 150)
                        widgets['size'].insert(0, "1")
                        
                    elif block_type in size_1_15_blocks:
                        # –†–∞–∑–º–µ—Ä 1-15
                        widgets['size'] = create_field("–†–∞–∑–º–µ—Ä (1-15)", 150)
                        widgets['size'].insert(0, "1")
                    
                    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
                    if block_type in ["router"]:
                        widgets['speed'] = create_field("–°–∫–æ—Ä–æ—Å—Ç—å (–º–∞–∫—Å. 50)", 150)

                    if block_type in ["conveyor", "Unloader", "Junction"]:
                        widgets['speed'] = create_field("–°–∫–æ—Ä–æ—Å—Ç—å (–º–∞–∫—Å. 50)", 150)
                    
                    if block_type in ["router", "Junction", "conveyor","conduit", "liquid_router"]:
                        widgets['capacity'] = create_field("–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (–º–∞–∫—Å. 25)", 150)
                    
                    if block_type == "PowerNode":
                        widgets['range'] = create_field("–†–∞–¥–∏—É—Å (–º–∞–∫—Å. 100)", 150)
                        widgets['connections'] = create_field("–ú–∞–∫—Å. –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–º–∞–∫—Å. 500)", 150)
                    
                    if block_type in ["SolarGenerator", "ConsumeGenerator", "ThermalGenerator"]:
                        max_energy = 1000000 if block_type == "SolarGenerator" else 5000000
                        widgets['energy'] = create_field(f"–í—ã—Ä–∞–±–æ—Ç–∫–∞ —ç–Ω–µ—Ä–≥–∏–∏ (–º–∞–∫—Å. {max_energy:,})", 150)
                        
                    if block_type == "StorageBlock":
                        widgets['item_capacity'] = create_field("–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (–º–∞–∫—Å. 100.000)", 150)
                    
                    if block_type == "GenericCrafter":
                        # –ß–µ–∫–±–æ–∫—Å —ç–Ω–µ—Ä–≥–∏–∏
                        widgets['power_enabled'] = ctk.BooleanVar(value=False)
                        
                        def toggle_power():
                            if widgets['power_enabled'].get():
                                widgets['energy_label'].pack()
                                widgets['energy_consumption'].pack()
                            else:
                                widgets['energy_label'].pack_forget()
                                widgets['energy_consumption'].pack_forget()
                        
                        ctk.CTkCheckBox(root, text="–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —ç–Ω–µ—Ä–≥–∏—é", 
                                    variable=widgets['power_enabled'], 
                                    command=toggle_power).pack(pady=6)
                        
                        widgets['energy_label'] = ctk.CTkLabel(root, text="–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏")
                        widgets['energy_consumption'] = ctk.CTkEntry(root, width=150)
                        widgets['energy_label'].pack_forget()
                        widgets['energy_consumption'].pack_forget()
                        
                        widgets['craft_time'] = create_field("–°–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ (—Å–µ–∫/–ø—Ä–µ–¥–º–µ—Ç)", 150)
                    
                    if block_type == "Battery":
                        widgets['power_buffer'] = create_field("–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —ç–Ω–µ—Ä–≥–∏–∏ (–º–∞–∫—Å. 10.000.000)", 150)
                    
                    if block_type == "BeamNode":
                        widgets['range'] = create_field("–†–∞–¥–∏—É—Å (–º–∞–∫—Å. 50)", 150)
                    
                    if block_type in ["Liquid_Tank"]:
                        widgets['liquid_capacity'] = create_field("–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∂–∏–¥–∫–æ—Å—Ç–∏ (–º–∞–∫—Å. 10.000.000)", 150)
                                       
                    if block_type == "Pump":
                        # –ß–µ–∫–±–æ–∫—Å —ç–Ω–µ—Ä–≥–∏–∏
                        widgets['power_enabled'] = ctk.BooleanVar(value=False)
                        
                        def toggle_power():
                            if widgets['power_enabled'].get():
                                widgets['energy_label'].pack()
                                widgets['energy_consumption'].pack()
                            else:
                                widgets['energy_label'].pack_forget()
                                widgets['energy_consumption'].pack_forget()
                        
                        ctk.CTkCheckBox(root, text="–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —ç–Ω–µ—Ä–≥–∏—é", 
                                    variable=widgets['power_enabled'], 
                                    command=toggle_power).pack(pady=6)
                        
                        widgets['energy_label'] = ctk.CTkLabel(root, text="–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏")
                        widgets['energy_consumption'] = ctk.CTkEntry(root, width=150)
                        widgets['energy_label'].pack_forget()
                        widgets['energy_consumption'].pack_forget()
                        
                        widgets['pumpAmount'] = create_field("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∫–∞—á–∏–∫–∞ (1=4 –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä 2 –∞ –≤—ã–∫–∞—á–∫–∞ 1)(–º–∞–∫—Å. 5000)", 150)
                        widgets['capacity'] = create_field("–•—Ä–∞–Ω–∏–ª–∏—â–µ(–º–∞–∫—Å. 15000)", 150)
                
                    if block_type == "SolidPump":
                        # –ß–µ–∫–±–æ–∫—Å —ç–Ω–µ—Ä–≥–∏–∏
                        widgets['power_enabled'] = ctk.BooleanVar(value=False)
                        
                        def toggle_power():
                            if widgets['power_enabled'].get():
                                widgets['energy_label'].pack()
                                widgets['energy_consumption'].pack()
                            else:
                                widgets['energy_label'].pack_forget()
                                widgets['energy_consumption'].pack_forget()
                        
                        ctk.CTkCheckBox(root, text="–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —ç–Ω–µ—Ä–≥–∏—é", 
                                    variable=widgets['power_enabled'], 
                                    command=toggle_power).pack(pady=6)
                        
                        widgets['energy_label'] = ctk.CTkLabel(root, text="–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏")
                        widgets['energy_consumption'] = ctk.CTkEntry(root, width=150)
                        widgets['energy_label'].pack_forget()
                        widgets['energy_consumption'].pack_forget()

                        widgets['pumpAmount'] = create_field("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∫–∞—á–∏–∫–∞ (–º–∞–∫—Å. 1000)", 150)
                        widgets['capacity'] = create_field("–•—Ä–∞–Ω–∏–ª–∏—â–µ(–º–∞–∫—Å. 15000)", 150)
                        
                # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–µ–π
                def create_field(text, width):
                    frame = ctk.CTkFrame(root, fg_color="transparent")
                    frame.pack(fill="x", pady=5)
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
                    container = ctk.CTkFrame(frame, fg_color="transparent")
                    container.pack(expand=True)
                    
                    label = ctk.CTkLabel(container, text=text)
                    entry = ctk.CTkEntry(container, width=width)
                    
                    label.grid(row=0, column=0, padx=(0, 10))
                    entry.grid(row=0, column=1)
                    
                    # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                    container.grid_columnconfigure(0, weight=1)
                    container.grid_columnconfigure(1, weight=0)
                    container.grid_columnconfigure(2, weight=1)
                    
                    return entry
                
                # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏
                def get_block_name(b_type):
                    names = {
                        "wall": "—Å—Ç–µ–Ω—ã", "conveyor": "–∫–æ–Ω–≤–µ–π–µ—Ä–∞", "router": "—Ä–æ—É—Ç–µ—Ä–∞",
                        "PowerNode": "—ç–Ω–µ—Ä–≥–æ —É–∑–ª–∞", "SolarGenerator": "—Å–æ–ª–Ω–µ—á–Ω–æ–π –ø–∞–Ω–µ–ª–∏",
                        "GenericCrafter": "–∑–∞–≤–æ–¥–∞", "conduit": "—Ç—Ä—É–±—ã", 
                        "StorageBlock": "—Ö—Ä–∞–Ω–∏–ª–∏—â–∞", "ConsumeGenerator": "–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞",
                        "Battery": "–±–∞—Ç–∞—Ä–µ–∏", "ThermalGenerator": "—Ç–µ–ø–ª–æ–≤–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞",
                        "BeamNode": "–ª—É—á–µ–≤–æ–≥–æ —É–∑–ª–∞", "Junction": "–ø–µ—Ä–µ–∫—Ä—ë—Å—Ç–∫–∞",
                        "Unloader": "—Ä–∞–∑–≥—Ä—É–∑—á–∏–∫–∞", "liquid_router": "–∂–∏–¥–∫–æ—Å—Ç–Ω–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞",
                        "Liquid_Tank": "–±–∞–∫–∞ –∂–∏–¥–∫–æ—Å—Ç–∏", "LiquidJunction": "–∂–∏–¥–∫–æ—Å—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ–∫—Ä—ë—Å—Ç–∫–∞",
                        "Pump": "–ü–æ–º–ø—ã", "SolidPump": "–Ω–∞–∑–µ–º–Ω–æ–π –ø–æ–º–ø—ã"
                    }
                    return names.get(b_type, "–±–ª–æ–∫–∞")
                
                # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON —Ñ–∞–π–ª–∞ –±–ª–æ–∫–∞
                def save_block_json(block_data):
                    try:
                        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –±–ª–æ–∫–æ–≤, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
                        blocks_folder = os.path.join(mod_folder, "content", "blocks")
                        os.makedirs(blocks_folder, exist_ok=True)
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –±–ª–æ–∫–∞ –∏ —Å–æ–∑–¥–∞–µ–º –¥–ª—è –Ω–µ–≥–æ –ø–∞–ø–∫—É
                        block_type = block_data['type']
                        block_type_folder = os.path.join(blocks_folder, block_type)
                        os.makedirs(block_type_folder, exist_ok=True)
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON —Ñ–∞–π–ª
                        block_file = os.path.join(block_type_folder, f"{block_data['name']}.json")
                        with open(block_file, 'w', encoding='utf-8') as f:
                            json.dump(block_data, f, indent=4, ensure_ascii=False)
                        
                        print(f"–ë–ª–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {block_file}")
                        return True
                        
                    except Exception as e:
                        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–ª–æ–∫: {e}")
                        return False
                
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—è
                create_global_fields()
                create_local_fields()
                
                # –ß—Ç–µ–Ω–∏–µ cache.json
                with open(resource_path(os.path.join("mindustry_mod_creator", "cache", f"{mod_name}.json")), "r", encoding="utf-8") as f:
                    CACHE_FILE = json.load(f)
                
                def save_block():
                    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
                    name = widgets['name'].get().strip().replace(" ", "_")
                    description = widgets['desc'].get().strip()
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
                    if any(char in '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è' for char in name.lower()):
                        messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä—É—Å—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã")
                        return
                    
                    try:
                        # –ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                        health = int(widgets['health'].get())
                        build_cost = int(widgets['build_time'].get()) * 60
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –±–ª–æ–∫–∞
                        fixed_size_1_blocks = ["conveyor", "conduit", "Junction", "Unloader", "liquid_router", "LiquidJunction", "BeamNode"]
                        size_1_2_blocks = ["router"]
                        size_1_15_blocks = ["PowerNode", "wall", "SolarGenerator", "GenericCrafter", "StorageBlock", 
                                        "ConsumeGenerator", "Battery", "ThermalGenerator", "Liquid_Tank", "Pump", "SolidPump"]
                        
                        if block_type in fixed_size_1_blocks:
                            size = 1  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä 1
                        elif block_type in size_1_2_blocks:
                            size = int(widgets['size'].get())
                            if size < 1 or size > 2:
                                raise ValueError("–†–∞–∑–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1-2")
                        elif block_type in size_1_15_blocks:
                            size = int(widgets['size'].get())
                            if size < 1 or size > 15:
                                raise ValueError("–†–∞–∑–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1-15")
                        else:
                            size = 1  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        
                        # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
                        if health < 1: raise ValueError("–•–ü –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å > 0")
                        if build_cost < 60: raise ValueError("–í—Ä–µ–º—è —Å—Ç—Ä–æ–π–∫–∏ ‚â• 1 —Å–µ–∫")
                        
                        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–ª–æ–∫–∞
                        block_data = {
                            "name": name,
                            "description": description,
                            "health": health,
                            "size": size,
                            "buildTime": build_cost,
                            "type": block_type,
                            "requirements": [],
                            "research": {"parent": "", "requirements": [], "objectives": []}
                        }
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è
                        if block_type in ["router"]:
                            speed_val = int(widgets['speed'].get())
                            if speed_val < 1 or speed_val > 50:
                                raise ValueError("–°–∫–æ—Ä–æ—Å—Ç—å 1-50")
                            speed = (1 / 60) * speed_val
                            block_data.update({"speed": speed, "displaySpeed": speed})

                        if block_type in ["conveyor", "Unloader","Junction"]:
                            speed_val = int(widgets['speed'].get())
                            if speed_val < 1 or speed_val > 50:
                                raise ValueError("–°–∫–æ—Ä–æ—Å—Ç—å 1-50")
                            speed = (1 / 60) * speed_val
                        
                        if block_type in ["router", "Junction","conveyor","conduit","liquid_router"]:
                            capacity = int(widgets['capacity'].get())
                            if capacity < 1 or capacity > 25:
                                    raise ValueError("–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å 1-25")
                            if block_type in ["router", "Junction","conveyor"]:
                                block_data["itemCapacity"] = capacity
                            if block_type in ["conduit","liquid_router"]:
                                block_data["liquidCapacity"] = capacity
                        
                        if block_type == "PowerNode":
                            range_val = int(widgets['range'].get())
                            connections = int(widgets['connections'].get())
                            
                            if range_val < 1 or range_val > 100: raise ValueError("–†–∞–¥–∏—É—Å 1-100")
                            if connections < 2 or connections > 500: raise ValueError("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è 2-500")
                            
                            block_data.update({
                                "range": range_val * 8,
                                "maxNodes": connections
                            })
                        
                        if block_type in ["SolarGenerator", "ThermalGenerator"]:
                            energy_val = float(widgets['energy'].get())
                            max_energy = 1000000 if block_type == "SolarGenerator" else 5000000
                            if energy_val < 1 or energy_val > max_energy:
                                raise ValueError(f"–≠–Ω–µ—Ä–≥–∏—è 1-{max_energy}")
                            block_data["powerProduction"] = energy_val / 60

                        if block_type == "ConsumeGenerator":
                            energy_val = float(widgets['energy'].get())
                            if energy_val < 1 or energy_val > 5000000:
                                raise ValueError("–≠–Ω–µ—Ä–≥–∏—è 1-5.000.000")
                            block_data.update({
                                "powerProduction": energy_val / 60,
                                "consumes": {"items": [], "liquids": []}
                            })
                        
                        if block_type == "StorageBlock":
                            capacity = int(widgets['item_capacity'].get())
                            if capacity < 1 or capacity > 100000:
                                raise ValueError("–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å 1-100K")
                            block_data["itemCapacity"] = capacity
                        
                        if block_type == "GenericCrafter":
                            craft_time = int(widgets['craft_time'].get())
                            block_data.update({
                                "craftTime": craft_time * 60,
                                "itemCapacity": 50,
                                "liquidCapacity": 50,
                                "consumes": {"items": [], "liquids": []},
                                "outputItems": [],
                                "outputLiquids": [],
                                "drawer": {
                                    "type": "DrawMulti",
                                    "drawers": [
                                        {
                                            "type": "DrawRegion"
                                        },
                                        {
                                            "type": "DrawFlame",
                                            "flameColor": "FFDD1D",
                                            "flameRadius": 3,
                                            "flameRadiusScl": 4.0,
                                            "flameRadiusMag": 1.5
                                        }
                                    ]
                                }
                            })
                            
                            if widgets['power_enabled'].get():
                                energy_cons = int(widgets['energy_consumption'].get())
                                block_data["consumes"]["power"] = energy_cons / 60
                        
                        if block_type == "Battery":
                            buffer_val = int(widgets['power_buffer'].get())
                            if buffer_val < 1 or buffer_val > 10000000:
                                raise ValueError("–ë—É—Ñ–µ—Ä —ç–Ω–µ—Ä–≥–∏–∏ 1-10M")
                            block_data["consumes"] = {"powerBuffered": buffer_val}
                        
                        if block_type == "BeamNode":
                            range_val = int(widgets['range'].get())
                            if range_val < 1 or range_val > 50:
                                raise ValueError("–†–∞–¥–∏—É—Å 1-50")
                            block_data["range"] = range_val * 8
                                               
                        if block_type in ["Liquid_Tank"]:
                            capacity = int(widgets['liquid_capacity'].get())
                            block_data["liquidCapacity"] = capacity
                        
                        if block_type == "Pump":
                            pumpAmount = int(widgets['pumpAmount'].get())
                            capacity = int(widgets['capacity'].get())
                            amount = pumpAmount / 60
                            if pumpAmount < 1 or pumpAmount > 5000:
                                raise ValueError("–í—ã–∫–∞—á–∫–∞ –Ω–µ –±–æ–ª—å—à–µ 5000")
                            if capacity < 1 or capacity > 15000:
                                raise ValueError("–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –Ω–µ –±–æ–ª—å—à–µ 15000")
                            block_data.update({
                                "pumpAmount": amount,
                                "liquidCapacity": capacity
                                })
                        
                        if block_type == "SolidPump":
                            pumpAmount = int(widgets['pumpAmount'].get())
                            capacity = int(widgets['capacity'].get())
                            amount = pumpAmount / 60
                            if pumpAmount < 1 or pumpAmount > 1000:
                                raise ValueError("–í—ã–∫–∞—á–∫–∞ –Ω–µ –±–æ–ª—å—à–µ 1000")
                            if capacity < 1 or capacity > 15000:
                                raise ValueError("–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –Ω–µ –±–æ–ª—å—à–µ 15000")
                            block_data.update({
                                "pumpAmount": amount,
                                "liquidCapacity": capacity
                                })
                        
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                        category_map = {
                            "wall": "defense", "conveyor": "distribution", "router": "distribution",
                            "PowerNode": "power", "SolarGenerator": "power", "GenericCrafter": "crafting",
                            "conduit": "liquid", "StorageBlock": "distribution", "ConsumeGenerator": "power",
                            "Battery": "power", "ThermalGenerator": "power", "BeamNode": "power",
                            "Junction": "distribution", "Unloader": "distribution", "liquid_router": "liquid",
                            "Liquid_Tank": "liquid", "LiquidJunction": "liquid", "Pump": "liquid",
                            "SolidPump": "production"
                        }
                        block_data["category"] = category_map.get(block_type, "misc")
                        
                    except ValueError as e:
                        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {e}")
                        return
                    
                    if not name or not description:
                        messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–º—è –∏ –æ–ø–∏—Å–∞–Ω–∏–µ")
                        return
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                    if block_type not in CACHE_FILE:
                        CACHE_FILE[block_type] = []
                    if name not in CACHE_FILE[block_type]:
                        CACHE_FILE[block_type].append(name)
                    
                    with open(resource_path(os.path.join("mindustry_mod_creator", "cache", f"{mod_name}.json")), "w", encoding="utf-8") as f:
                        json.dump(CACHE_FILE, f, indent=4, ensure_ascii=False)
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏
                    if name_exists_in_content(mod_folder, name, block_type):
                        return
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON —Ñ–∞–π–ª –±–ª–æ–∫–∞
                    if not save_block_json(block_data):
                        return
                    
                    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä
                    if block_type == "GenericCrafter":
                        open_item_GenericCrafter_editor(name, block_data)
                    elif block_type == "ConsumeGenerator":
                        open_item_consumes_editor(name, block_data)
                    elif block_type == "SolidPump":
                        open_solidpump_liquid_edit(name, block_data)
                    else:
                        open_requirements_editor(name, block_data)
                
                # –ö–Ω–æ–ø–∫–∏
                ctk.CTkButton(root, text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", command=lambda: create_block(mod_name)).pack(pady=20)
                ctk.CTkButton(root, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_block).pack(pady=20)

        # –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ 
        root = ctk.CTk()
        root.title("Mindustry Mod Creator")
        root.geometry("700x500")

        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –ª–µ–≤—É—é (30%) –∏ –ø—Ä–∞–≤—É—é (70%) —á–∞—Å—Ç–∏
        left_frame = ctk.CTkFrame(root, width=240)
        right_frame = ctk.CTkFrame(root)
        left_frame.pack(side="left", fill="y", padx=5, pady=5)
        right_frame.pack(side="right", fill="both", expand=True, padx=5, pady=5)

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å (30%) - —Å–ø–∏—Å–æ–∫ –º–æ–¥–æ–≤
        mods_frame = ctk.CTkScrollableFrame(left_frame)
        mods_frame.pack(fill="both", expand=True, padx=5, pady=5)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ø–∏—Å–∫–∞ –º–æ–¥–æ–≤
        ctk.CTkLabel(mods_frame, text="–í–∞—à–∏ –º–æ–¥—ã", font=("Arial", 14)).pack(pady=5)

        def load_all_icons_paint(parent_window=None):
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ items —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø–æ–ª–Ω—ã—Ö –ø—É—Ç–µ–π
            download_configs = [
                (
                    "https://raw.githubusercontent.com/Anuken/Mindustry/master/core/assets-raw/sprites/",
                    {
                        "copper": "items/item-copper.png",
                        "beryllium": "items/item-beryllium.png",
                        "carbide": "items/item-carbide.png",
                        "fissile-matter": "items/item-fissile-matter.png",
                        "oxide": "items/item-oxide.png",
                        "tungsten": "items/item-tungsten.png",
                        "dormant-cyst": "items/item-dormant-cyst.png",
                        "lead": "items/item-lead.png",
                        "metaglass": "items/item-metaglass.png",
                        "graphite": "items/item-graphite.png",
                        "sand": "items/item-sand.png",
                        "coal": "items/item-coal.png",
                        "titanium": "items/item-titanium.png",
                        "thorium": "items/item-thorium.png",
                        "scrap": "items/item-scrap.png",
                        "silicon": "items/item-silicon.png",
                        "plastanium": "items/item-plastanium.png",
                        "phase-fabric": "items/item-phase-fabric.png",
                        "surge-alloy": "items/item-surge-alloy.png",
                        "spore-pod": "items/item-spore-pod.png",
                        "pyratite": "items/item-pyratite.png",
                    },
                    os.path.join("mindustry_mod_creator", "icons", "paint", "items"),
                    False
                ),
                (
                    "https://raw.githubusercontent.com/Anuken/Mindustry/master/core/assets-raw/sprites/",
                    {
                        "arkycite": "items/liquid-arkycite.png",
                        "water": "items/liquid-water.png",
                        "slag": "items/liquid-slag.png",
                        "oil": "items/liquid-oil.png",
                        "neoplasm": "items/liquid-neoplasm.png",
                        "cyanogen": "items/liquid-cyanogen.png",
                        "cryofluid": "items/liquid-cryofluid.png"
                    },
                    os.path.join("mindustry_mod_creator", "icons", "paint", "liquids"),
                    False
                )
            ]

            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è –∏–∫–æ–Ω–æ–∫, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            for config in download_configs:
                os.makedirs(config[2], exist_ok=True)

            # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∫–æ–Ω–æ–∫ (—Ç–æ–ª—å–∫–æ —Ç–µ—Ö, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç)
            total_icons = 0
            download_tasks = []

            for base_url, name_icons, icons_folder, is_item in download_configs:
                existing_files = set(os.listdir(icons_folder)) if os.path.exists(icons_folder) else set()
                if isinstance(name_icons, dict):
                    for name, path in name_icons.items():
                        if f"{name}.png" not in existing_files:
                            total_icons += 1
                            download_tasks.append((base_url + path, os.path.join(icons_folder, f"{name}.png"), name))

            if total_icons == 0:
                return True

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–∫–Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            if parent_window:
                progress_window = ctk.CTkToplevel(parent_window)
                progress_window.title("–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∫–æ–Ω–æ–∫")
                progress_window.geometry("400x150")
                progress_window.transient(parent_window)
                progress_window.grab_set()
                
                progress_label = ctk.CTkLabel(progress_window, text=f"–ó–∞–≥—Ä—É–∑–∫–∞ {total_icons} –∏–∫–æ–Ω–æ–∫...")
                progress_label.pack(pady=10)
                
                progress_bar = ctk.CTkProgressBar(progress_window, width=300)
                progress_bar.pack(pady=10)
                progress_bar.set(0)
                
                status_label = ctk.CTkLabel(progress_window, text="0/0")
                status_label.pack(pady=5)
                
                progress_window.update()

            downloaded = 0
            errors = []

            def update_progress(current, total, name):
                if parent_window:
                    progress = (current + 1) / total
                    progress_bar.set(progress)
                    status_label.configure(text=f"{current + 1}/{total} - {name}.png")
                    progress_label.configure(text=f"–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è: {name}.png")
                    progress_window.update()

            def download_file(url, save_path, name):
                try:
                    urllib.request.urlretrieve(url, save_path)
                    return True, name
                except Exception as e:
                    return False, (name, str(e))

            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º ThreadPoolExecutor –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ (4 –ø–æ—Ç–æ–∫–∞)
                with ThreadPoolExecutor(max_workers=4) as executor:
                    futures = {executor.submit(download_file, url, path, name): (url, path, name) for url, path, name in download_tasks}
                    
                    for future in as_completed(futures):
                        url, path, name = futures[future]
                        success, result = future.result()
                        
                        if success:
                            downloaded += 1
                            if parent_window:
                                update_progress(downloaded, total_icons, name)
                        else:
                            errors.append(result)
                            downloaded += 1
                            if parent_window:
                                progress_label.configure(text=f"–û—à–∏–±–∫–∞: {name}.png")

                # –í—ã–≤–æ–¥ –æ—à–∏–±–æ–∫, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                if errors:
                    error_msg = "\n".join(f"{name}: {error}" for name, error in errors)
                    if parent_window:
                        messagebox.showwarning("–û—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∫–æ–Ω–∫–∏:\n{error_msg}")
                    else:
                        print(f"–û—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏:\n{error_msg}")

                if parent_window:
                    progress_label.configure(text="–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                    progress_window.after(2000, progress_window.destroy)
                    
                return True
                
            except Exception as e:
                error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
                if parent_window:
                    progress_label.configure(text=error_msg)
                    messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)
                else:
                    print(error_msg)
                return False
        load_all_icons_paint(root)

        def on_mod_click(mod_name):
            """–§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –º–æ–¥"""
            # –£–Ω–∏—á—Ç–æ–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤–∏–¥–∂–µ—Ç—ã
            for widget in root.winfo_children():
                widget.destroy()
            
            # –°–æ–∑–¥–∞–µ–º UI –∫–∞–∫ –≤ show_create_ui, –Ω–æ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º
            root.geometry("500x500")
            label = ctk.CTkLabel(root, text="–ù–∞–∑–≤–∞–Ω–∏—è –ø–∞–ø–∫–∞")
            global entry_name
            entry_name = ctk.CTkEntry(root, width=200)
            entry_name.insert(0, mod_name)  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –∏–º—è –º–æ–¥–∞
            
            label.pack(pady=70)
            entry_name.pack(pady=10)
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑—ã–≤–∞–µ–º setup_mod_json –±–µ–∑ –∫–Ω–æ–ø–∫–∏ "–î–∞–ª–µ–µ"
            setup_mod_json_auto()

        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–∞–º–∏ –∏–∑ –ø–∞–ø–∫–∏
        mods_dir = os.path.join("mindustry_mod_creator", "mods")
        if os.path.exists(mods_dir):
            for mod_folder in sorted(os.listdir(mods_dir)):
                full_path = os.path.join(mods_dir, mod_folder)
                if os.path.isdir(full_path):
                    btn = ctk.CTkButton(
                        mods_frame, 
                        text=mod_folder,
                        width=200,
                        height=30,
                        command=lambda name=mod_folder: on_mod_click(name)
                    )
                    btn.pack(pady=3, padx=5)

        def show_create_ui():
            """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç UI –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –º–æ–¥–∞"""
            global entry_name
            root.geometry("500x500")
            for widget in root.winfo_children():
                widget.destroy()

            label = ctk.CTkLabel(root, text="–ù–∞–∑–≤–∞–Ω–∏—è –ø–∞–ø–∫–∞")
            entry_name = ctk.CTkEntry(root, width=200)
            button_next = ctk.CTkButton(root, text="–î–∞–ª–µ–µ", command=setup_mod_json)
            
            label.pack(pady=70)
            entry_name.pack(pady=10)
            button_next.pack(side=ctk.BOTTOM, pady=50)

        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å (70%) - –∫–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è
        ctk.CTkButton(
            right_frame,
            text="–°–æ–∑–¥–∞—Ç—å –º–æ–¥",
            width=200,
            height=50,
            font=("Arial", 14),
            command=show_create_ui
        ).pack(expand=True)

        root.mainloop()

if __name__ == "__main__":
    MindustryModCreator.main()
